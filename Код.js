const TELEGRAM_TOKEN = '8368578615:AAF6fDpa28k2a_LG0pa3dcn4mvmLTU2GqQY';
const SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1EK0i774b668t6bZEE3iTgtbHAs3OUyXdCpuOYxxMWHE/edit';

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
function doPost(e) {
  let chatId, data;
  try {
    if (!e || !e.postData || !e.postData.contents) {
      Logger.log("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram.");
      return;
    }
    data = JSON.parse(e.postData.contents);

    if (data.callback_query) {
      handleCallbackQuery(data.callback_query);
      return;
    }

    if (data.message && data.message.chat && data.message.text) {
      chatId = data.message.chat.id;
      const msgRaw = data.message.text.trim();
      const msg = msgRaw.toLowerCase();
      const session = getSession(chatId);

      if (session && session.awaitingInput) {
        handleUserInput(chatId, msgRaw, session);
      } else {
        handleCommand(chatId, msg, msgRaw);
      }
      return;
    }

    Logger.log("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: " + e.postData.contents);

  } catch (err) {
    chatId = (data && data.message) ? data.message.chat.id : (data && data.callback_query) ? data.callback_query.from.id : null;
    if (chatId) {
      sendText(chatId, `--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${err.message}\n–°—Ç–µ–∫: ${err.stack}`);
    }
    Logger.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ doPost: ${err.message} ${err.stack}`);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const [action, value] = callbackQuery.data.split(':');

  answerCallbackQuery(callbackQuery.id);

  if (action === 'setGoal') {
    const userData = saveUserParam(chatId, 'goal', value);
    editMessageText(chatId, messageId, `–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *${value}*`);
    
    // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (userData.weight && userData.goal) {
        triggerNutritionCalculation(chatId, userData);
    }
    sendMenu(chatId);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
function handleCommand(chatId, msg, msgRaw) {
  switch (msg) {
    case '/start':
      return sendStart(chatId);
    case 'ü•Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å':
      return sendGoalOptions(chatId);
    case '‚öñÔ∏è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
      startSession(chatId, 'awaitParams');
      return sendText(chatId, '–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –≤–µ—Å(–∫–≥), —Ä–æ—Å—Ç(—Å–º), –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(m/f), —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏(–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)');
    case 'üïí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
      startSession(chatId, 'awaitNotifyTime');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)');
    case 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
      return sendTodayMenu(chatId);
    case 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
      return sendShoppingList(chatId);
    case 'üë®‚Äçüç≥ —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º?':
      return sendCookingList(chatId);
    case 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞':
      return sendText(chatId, '–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥');
    default:
      if (msg.startsWith('üîÑ –∑–∞–º–µ–Ω–∞')) return sendSubstitute(chatId, msgRaw);
      return sendMenu(chatId);
  }
}

// --- –°–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ---
function getSession(chatId) {
  const userProps = PropertiesService.getUserProperties();
  let s = userProps.getProperty('session_' + chatId);
  if (s) {
    try {
      return JSON.parse(s);
    } catch (e) {
      clearSession(chatId);
      return {};
    }
  }
  return {};
}

function startSession(chatId, awaitingInput) {
  const userProps = PropertiesService.getUserProperties();
  userProps.setProperty('session_' + chatId, JSON.stringify({ awaitingInput }));
}

function clearSession(chatId) {
  const userProps = PropertiesService.getUserProperties();
  userProps.deleteProperty('session_' + chatId);
}

function handleUserInput(chatId, input, session) {
  switch (session.awaitingInput) {
    case 'awaitParams':
      const parts = input.split(',').map(x => x.trim());
      if (parts.length !== 5) {
        sendText(chatId, '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏: –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(m/f), –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)');
        return;
      }
      const [weight, height, age, sex, activity] = parts;
      if (isNaN(weight) || isNaN(height) || isNaN(age) || !['m', 'f'].includes(sex.toLowerCase()) || !['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'].includes(activity.toLowerCase())) {
        sendText(chatId, '–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: 70, 175, 40, m, —Å—Ä–µ–¥–Ω–∏–π');
        return;
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      let userData = saveUserParam(chatId, 'weight', weight);
      userData = saveUserParam(chatId, 'height', height);
      userData = saveUserParam(chatId, 'age', age);
      userData = saveUserParam(chatId, 'sex', sex.toLowerCase());
      userData = saveUserParam(chatId, 'activity', activity.toLowerCase());
      
      clearSession(chatId);
      sendText(chatId, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');

      // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      if (userData.weight && userData.goal) {
          triggerNutritionCalculation(chatId, userData);
      }
      sendMenu(chatId);
      break;

    case 'awaitNotifyTime':
      if (validateTimeFormat(input)) {
        saveUserParam(chatId, 'notifyTime', input);
        clearSession(chatId);
        sendText(chatId, `–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *${input}*`, getMenu(chatId));
      } else {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      }
      break;

    default:
      clearSession(chatId);
      sendText(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.', getMenu(chatId));
      break;
  }
}

// --- AI-–º–æ–¥—É–ª—å: –†–∞—Å—á–µ—Ç –ö–ë–ñ–£ ---
function calculateNutrition(userData) {
  const { weight, height, age, sex, activity, goal } = userData;

  // 1. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
  let bmr;
  if (sex === 'm') {
    bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5;
  } else {
    bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161;
  }

  // 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const activityMultipliers = { '–Ω–∏–∑–∫–∏–π': 1.2, '—Å—Ä–µ–¥–Ω–∏–π': 1.55, '–≤—ã—Å–æ–∫–∏–π': 1.9 };
  const tdee = bmr * (activityMultipliers[activity] || 1.2);

  // 3. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ —Ü–µ–ª—å
  const goalMultipliers = { '–ø–æ—Ö—É–¥–µ–Ω–∏–µ': 0.85, '–Ω–∞–±–æ—Ä': 1.15, '—É–¥–µ—Ä–∂–∞–Ω–∏–µ': 1.0 };
  const finalCalories = Math.round(tdee * (goalMultipliers[goal] || 1.0));

  // 4. –†–∞—Å—á–µ—Ç –ë–ñ–£ (–≤ –≥—Ä–∞–º–º–∞—Ö)
  const bjuRatios = {
    '–ø–æ—Ö—É–¥–µ–Ω–∏–µ': { p: 0.35, f: 0.30, c: 0.35 },
    '–Ω–∞–±–æ—Ä':     { p: 0.30, f: 0.25, c: 0.45 },
    '—É–¥–µ—Ä–∂–∞–Ω–∏–µ': { p: 0.30, f: 0.30, c: 0.40 },
  };
  const ratio = bjuRatios[goal] || bjuRatios['—É–¥–µ—Ä–∂–∞–Ω–∏–µ'];
  const proteins = Math.round((finalCalories * ratio.p) / 4);
  const fats = Math.round((finalCalories * ratio.f) / 9);
  const carbs = Math.round((finalCalories * ratio.c) / 4);

  return { calories: finalCalories, proteins, fats, carbs };
}

function triggerNutritionCalculation(chatId, userData) {
    const nutrition = calculateNutrition(userData);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let finalUserData = saveUserParam(chatId, 'calories', nutrition.calories);
    finalUserData = saveUserParam(chatId, 'proteins', nutrition.proteins);
    finalUserData = saveUserParam(chatId, 'fats', nutrition.fats);
    finalUserData = saveUserParam(chatId, 'carbs', nutrition.carbs);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const message = `ü§ñ *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:*\n\n` +
                    `*–ö–∞–ª–æ—Ä–∏–∏:* ${nutrition.calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n` +
                    `*–ë–µ–ª–∫–∏:* ${nutrition.proteins} –≥/–¥–µ–Ω—å\n` +
                    `*–ñ–∏—Ä—ã:* ${nutrition.fats} –≥/–¥–µ–Ω—å\n` +
                    `*–£–≥–ª–µ–≤–æ–¥—ã:* ${nutrition.carbs} –≥/–¥–µ–Ω—å\n\n` +
                    `–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–µ–Ω—é.`;
    sendText(chatId, message);
}


// --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
function saveUserParam(chatId, key, value) {
  const userProps = PropertiesService.getUserProperties();
  let userData = getUserData(chatId);
  userData[key] = value;
  userProps.setProperty('user_' + chatId, JSON.stringify(userData));
  addUser(chatId);
  return userData; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}

function getUserData(chatId) {
  const userProps = PropertiesService.getUserProperties();
  let data = userProps.getProperty('user_' + chatId);
  try {
    return data ? JSON.parse(data) : {};
  } catch (e) {
    return {};
  }
}

// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ ---
function getAllUsers() {
  const scriptProps = PropertiesService.getScriptProperties();
  const usersJson = scriptProps.getProperty('all_users') || '[]';
  return JSON.parse(usersJson);
}

function addUser(chatId) {
  const scriptProps = PropertiesService.getScriptProperties();
  let users = getAllUsers();
  if (!users.includes(chatId)) {
    users.push(chatId);
    scriptProps.setProperty('all_users', JSON.stringify(users));
  }
}

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
function getMenu(chatId) {
  const userData = getUserData(chatId);
  const notifyTime = userData.notifyTime || '–Ω–µ –∑–∞–¥–∞–Ω–æ';

  return {
    keyboard: [
      [{ text: "ü•Ö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å" }, { text: "‚öñÔ∏è –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã" }],
      [{ text: "üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" }, { text: "üçΩ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" }],
      [{ text: "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫" }, { text: "üë®‚Äçüç≥ –ß—Ç–æ –≥–æ—Ç–æ–≤–∏–º?" }],
      [{ text: "üîÑ –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞" }],
      [{ text: `‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifyTime}` }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

function sendGoalOptions(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: "–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data: "setGoal:–ø–æ—Ö—É–¥–µ–Ω–∏–µ" },
        { text: "–ù–∞–±–æ—Ä –≤–µ—Å–∞", callback_data: "setGoal:–Ω–∞–±–æ—Ä" },
        { text: "–£–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data: "setGoal:—É–¥–µ—Ä–∂–∞–Ω–∏–µ" }
      ]
    ]
  };
  sendText(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:", keyboard);
}

// --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
function sendMenu(chatId) {
  sendText(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", getMenu(chatId));
}

function sendStart(chatId) {
  sendText(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", getMenu(chatId));
}

function sendText(chatId, text, keyboard = null) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
  const payload = {
    chat_id: String(chatId),
    text: text,
    parse_mode: 'Markdown',
    disable_web_page_preview: true,
  };
  if (keyboard) payload.reply_markup = JSON.stringify(keyboard);
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
  };
  try {
    UrlFetchApp.fetch(url, options);
  } catch (e) {
    Logger.log(`ERROR sending message to ${chatId}: ${e.message}`);
  }
}

function editMessageText(chatId, messageId, text) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/editMessageText`;
  const payload = {
    chat_id: String(chatId),
    message_id: messageId,
    text: text,
    parse_mode: 'Markdown'
  };
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
  };
  try {
    UrlFetchApp.fetch(url, options);
  } catch (e) {
    Logger.log(`ERROR editing message ${messageId} for ${chatId}: ${e.message}`);
  }
}

function answerCallbackQuery(callbackQueryId) {
  const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/answerCallbackQuery`;
  UrlFetchApp.fetch(url, { method: 'post', contentType: 'application/json', payload: JSON.stringify({ callback_query_id: callbackQueryId }) });
}

// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
function validateTimeFormat(timeStr) {
  return /^\d{2}:\d{2}$/.test(timeStr) &&
    Number(timeStr.substr(0, 2)) >= 0 && Number(timeStr.substr(0, 2)) < 24 &&
    Number(timeStr.substr(3, 2)) >= 0 && Number(timeStr.substr(3, 2)) < 60;
}

// --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ---
function sendTodayMenu(chatId) {
  const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName("–ú–µ–Ω—é –ø–æ –¥–Ω—è–º");
  const today = new Date();
  const dayNum = (today.getDate() % 20) + 1;
  const data = sheet.getDataRange().getValues();
  const row = data.find(r => r[0] === dayNum);
  if (!row) return sendText(chatId, "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", getMenu(chatId));

  const [_, zavtrak, perk1, obed, perk2, uzhin, kcal, cost] = row;
  const text = `üçΩ *–ú–µ–Ω—é –Ω–∞ –¥–µ–Ω—å ${dayNum}*\n\n` +
    `*–ó–∞–≤—Ç—Ä–∞–∫:* ${zavtrak}\n` +
    `*–ü–µ—Ä–µ–∫—É—Å 1:* ${perk1}\n` +
    `*–û–±–µ–¥:* ${obed}\n` +
    `*–ü–µ—Ä–µ–∫—É—Å 2:* ${perk2}\n` +
    `*–£–∂–∏–Ω:* ${uzhin}\n\n` +
    `–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: *${kcal} –∫–∫–∞–ª*\n–°—Ç–æ–∏–º–æ—Å—Ç—å: *${cost} ‚ÇΩ*`;

  sendText(chatId, text, getMenu(chatId));
}

function sendShoppingList(chatId) {
  const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫");
  const data = sheet.getDataRange().getValues();
  const today = new Date().toLocaleDateString("ru-RU");
  const todayItems = data.filter(r => r[0] === today);

  if (!todayItems.length) return sendText(chatId, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.", getMenu(chatId));

  const list = todayItems.map(r => `‚òê ${r[1]} ‚Äî ${r[3]} ${r[2]}`).join("\n");
  sendText(chatId, `üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ ${today}*\n\n${list}`, getMenu(chatId));
}

function sendCookingList(chatId) {
  const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName("–ì–æ—Ç–æ–≤–∫–∞");
  const data = sheet.getDataRange().getValues();
  const today = new Date().toLocaleDateString("ru-RU");
  const todayCook = data.filter(r => r[0] === today);

  if (!todayCook.length) return sendText(chatId, "–°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –≥–æ—Ç–æ–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.", getMenu(chatId));

  const list = todayCook.map(r => `üç≤ ${r[1]} ‚Äî –∏–∑: ${r[2]} –Ω–∞ ${r[3]} –¥–Ω–µ–π`).join("\n");
  sendText(chatId, `üë®‚Äçüç≥ *–°–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–∏–º:*\n\n${list}`, getMenu(chatId));
}

function sendSubstitute(chatId, msg) {
  const parts = msg.split(" ");
  if (parts.length < 3) return sendText(chatId, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '–∑–∞–º–µ–Ω–∞', –Ω–∞–ø—Ä–∏–º–µ—Ä:\nüîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥", getMenu(chatId));
  const target = parts.slice(2).join(" ").toLowerCase();

  const sheet = SpreadsheetApp.openByUrl(SPREADSHEET_URL).getSheetByName("–ó–∞–º–µ–Ω—ã");
  const data = sheet.getDataRange().getValues();
  const row = data.find(r => r[0].toLowerCase() === target);

  if (!row) return sendText(chatId, `–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–º–µ–Ω–∞—Ö –¥–ª—è "${target}".`, getMenu(chatId));

  const substitutes = row.slice(1).filter(v => v);
  const list = substitutes.map(s => `üîÅ ${s}`).join("\n");
  const text = `‚ôªÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è *${target}*:\n\n${list}`;

  sendText(chatId, text, getMenu(chatId));
}

// --- –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
function sendDailyNotifications() {
  const allUsers = getAllUsers();
  const now = new Date();
  const nowStr = Utilities.formatDate(now, "GMT+3", "HH:mm");

  allUsers.forEach(chatId => {
    const userData = getUserData(chatId);
    if (userData.notifyTime === nowStr) {
      sendTodayMenu(chatId);
      sendShoppingList(chatId);
      sendCookingList(chatId);
    }
  });
}