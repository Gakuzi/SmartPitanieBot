/**
 * –ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */
function testQuick() {
  Logger.log('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ScriptProperties
    const scriptProps = PropertiesService.getScriptProperties();
    Logger.log('‚úÖ ScriptProperties –¥–æ—Å—Ç—É–ø–Ω—ã');
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    const token = scriptProps.getProperty('TELEGRAM_BOT_TOKEN');
    const geminiKey = scriptProps.getProperty('GEMINI_API_KEY');
    
    Logger.log('TELEGRAM_BOT_TOKEN: ' + (token ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
    Logger.log('GEMINI_API_KEY: ' + (geminiKey ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    const rootFolderId = scriptProps.getProperty('ROOT_FOLDER_ID');
    if (rootFolderId) {
      try {
        const folder = DriveApp.getFolderById(rootFolderId);
        Logger.log('‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ' + folder.getName());
      } catch (error) {
        Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: ' + error.message);
      }
    } else {
      Logger.log('‚ö†Ô∏è ROOT_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    const templateId = scriptProps.getProperty('TEMPLATE_SHEET_ID');
    if (templateId) {
      try {
        const sheet = SpreadsheetApp.openById(templateId);
        Logger.log('‚úÖ –®–∞–±–ª–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ' + sheet.getName());
        
        const sheets = sheet.getSheets();
        Logger.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ' + sheets.length);
        sheets.forEach(sheet => {
          Logger.log('  - ' + sheet.getName());
        });
      } catch (error) {
        Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: ' + error.message);
      }
    } else {
      Logger.log('‚ö†Ô∏è TEMPLATE_SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    Logger.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure
    if (typeof setupCompleteInfrastructure === 'function') {
      Logger.log('‚úÖ setupCompleteInfrastructure –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      Logger.log('‚ùå setupCompleteInfrastructure –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è getProjectData
    if (typeof getProjectData === 'function') {
      Logger.log('‚úÖ getProjectData –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      Logger.log('‚ùå getProjectData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    Logger.log('üèÅ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
    
  } catch (error) {
    Logger.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ' + error.message);
    Logger.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ' + error.stack);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
function testSetupInfrastructure() {
  Logger.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´');
  
  try {
    if (typeof setupCompleteInfrastructure === 'function') {
      const results = setupCompleteInfrastructure();
      Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
      Logger.log(JSON.stringify(results, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ' + error.message);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
 */
function testProjectManagement() {
  Logger.log('üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–û–ú');
  
  try {
    if (typeof getProjectData === 'function') {
      const data = getProjectData();
      Logger.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:');
      Logger.log(JSON.stringify(data, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è getProjectData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
 */
function testAddTask() {
  Logger.log('‚ûï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò');
  
  try {
    if (typeof addNewTask === 'function') {
      const taskData = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        priority: '–°—Ä–µ–¥–Ω–∏–π',
        assignee: '–¢–µ—Å—Ç–µ—Ä',
        deadline: '2024-12-31'
      };
      
      const result = addNewTask(taskData);
      Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:');
      Logger.log(JSON.stringify(result, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è addNewTask –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message);
  }
} 