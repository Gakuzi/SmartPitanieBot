/**
 * @file TEST_system.js
 * @description –ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ SmartPitanieBot
 */

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 */
function runFullSystemTest() {
  Logger.log('üöÄ –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ SmartPitanieBot');
  
  const testResults = {
    timestamp: new Date(),
    tests: [],
    passed: 0,
    failed: 0,
    errors: []
  };

  // –¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const testSuite = [
    { name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', func: testConfiguration },
    { name: 'Google Drive –∏ –ø–∞–ø–∫–∏', func: testDriveSystem },
    { name: 'Google Sheets –∏ —à–∞–±–ª–æ–Ω—ã', func: testSheetsSystem },
    { name: 'Telegram API —Ñ—É–Ω–∫—Ü–∏–∏', func: testTelegramAPI },
    { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', func: testUserDataSystem },
    { name: '–°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π', func: testSessionSystem },
    { name: 'UI –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏', func: testUISystem },
    { name: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ BMR', func: testCalculationSystem },
    { name: 'Gemini AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', func: testGeminiAPI },
    { name: 'Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞', func: testWebhookSystem }
  ];

  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  testSuite.forEach(test => {
    try {
      Logger.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.name}`);
      const result = test.func();
      testResults.tests.push({
        name: test.name,
        passed: result.passed,
        message: result.message,
        details: result.details || []
      });
      
      if (result.passed) {
        testResults.passed++;
        Logger.log(`‚úÖ ${test.name}: –ü–†–û–®–ï–õ`);
      } else {
        testResults.failed++;
        Logger.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ò–õ–°–Ø - ${result.message}`);
      }
    } catch (error) {
      testResults.failed++;
      testResults.errors.push(`${test.name}: ${error.message}`);
      Logger.log(`üí• ${test.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
    }
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  generateTestReport(testResults);
  
  Logger.log(`\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û`);
  Logger.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${testResults.passed}`);
  Logger.log(`‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${testResults.failed}`);
  Logger.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${testResults.passed}/${testResults.tests.length}`);
  
  return testResults;
}

/**
 * –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function testConfiguration() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const requiredProps = [
      'ROOT_FOLDER_ID',
      'TEMPLATE_SHEET_ID', 
      'USERS_SPREADSHEET_ID',
      'TELEGRAM_TOKEN'
    ];
    
    const missingProps = [];
    const presentProps = [];
    
    requiredProps.forEach(prop => {
      const value = scriptProps.getProperty(prop);
      if (value) {
        presentProps.push(prop);
        results.details.push(`‚úÖ ${prop}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      } else {
        missingProps.push(prop);
        results.details.push(`‚ùå ${prop}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    const optionalProps = ['GEMINI_API_KEY', 'ADMIN_CHAT_ID'];
    optionalProps.forEach(prop => {
      const value = scriptProps.getProperty(prop);
      if (value) {
        results.details.push(`üî∂ ${prop}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
      } else {
        results.details.push(`‚ö™ ${prop}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
      }
    });
    
    if (missingProps.length === 0) {
      results.passed = true;
      results.message = `–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (${presentProps.length}/${requiredProps.length})`;
    } else {
      results.message = `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: ${missingProps.join(', ')}`;
    }
    
  } catch (error) {
    results.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Google Drive
 */
function testDriveSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const rootFolderId = scriptProps.getProperty('ROOT_FOLDER_ID');
    
    if (!rootFolderId) {
      results.message = 'ROOT_FOLDER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      return results;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
    try {
      const rootFolder = DriveApp.getFolderById(rootFolderId);
      results.details.push(`‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${rootFolder.getName()}`);
      results.details.push(`üìÅ URL: ${rootFolder.getUrl()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const files = rootFolder.getFiles();
      const folders = rootFolder.getFolders();
      
      let fileCount = 0;
      let folderCount = 0;
      
      while (files.hasNext()) {
        files.next();
        fileCount++;
      }
      
      while (folders.hasNext()) {
        folders.next();
        folderCount++;
      }
      
      results.details.push(`üìÑ –§–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ: ${fileCount}`);
      results.details.push(`üìÅ –ü–æ–¥–ø–∞–ø–æ–∫: ${folderCount}`);
      
      results.passed = true;
      results.message = '–°–∏—Å—Ç–µ–º–∞ Google Drive —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
      
    } catch (error) {
      results.message = `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ: ${error.message}`;
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Drive API: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Google Sheets
 */
function testSheetsSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const templateId = scriptProps.getProperty('TEMPLATE_SHEET_ID');
    const usersSpreadsheetId = scriptProps.getProperty('USERS_SPREADSHEET_ID');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    if (templateId) {
      try {
        const templateSheet = SpreadsheetApp.openById(templateId);
        results.details.push(`‚úÖ –®–∞–±–ª–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ${templateSheet.getName()}`);
        
        const sheets = templateSheet.getSheets();
        results.details.push(`üìä –õ–∏—Å—Ç–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ: ${sheets.length}`);
        
        const expectedSheets = ['–ú–µ–Ω—é –ø–æ –¥–Ω—è–º', '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '–ì–æ—Ç–æ–≤–∫–∞', '–ó–∞–º–µ–Ω—ã', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–õ–æ–≥–∏', '–ü—Ä–æ–¥—É–∫—Ç—ã'];
        const actualSheetNames = sheets.map(sheet => sheet.getName());
        
        expectedSheets.forEach(sheetName => {
          if (actualSheetNames.includes(sheetName)) {
            results.details.push(`‚úÖ –õ–∏—Å—Ç "${sheetName}": –Ω–∞–π–¥–µ–Ω`);
          } else {
            results.details.push(`‚ùå –õ–∏—Å—Ç "${sheetName}": –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
          }
        });
        
      } catch (error) {
        results.details.push(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —à–∞–±–ª–æ–Ω—É: ${error.message}`);
      }
    } else {
      results.details.push(`‚ùå TEMPLATE_SHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (usersSpreadsheetId) {
      try {
        const usersSheet = SpreadsheetApp.openById(usersSpreadsheetId);
        results.details.push(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞: ${usersSheet.getName()}`);
        
        const usersList = usersSheet.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
        if (usersList) {
          const lastRow = usersList.getLastRow();
          results.details.push(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: ${Math.max(0, lastRow - 1)}`);
        }
        
      } catch (error) {
        results.details.push(`‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
      }
    } else {
      results.details.push(`‚ùå USERS_SPREADSHEET_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
    try {
      results.details.push(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupProjectInfrastructure...`);
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      results.details.push(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è setupProjectInfrastructure –¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç–µ—Å—Ç–µ)`);
    } catch (error) {
      results.details.push(`‚ùå –û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ setupProjectInfrastructure: ${error.message}`);
    }
    
    if (templateId && usersSpreadsheetId) {
      results.passed = true;
      results.message = '–°–∏—Å—Ç–µ–º–∞ Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
    } else {
      results.message = '–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Google Sheets –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã';
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Sheets API: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç Telegram API
 */
function testTelegramAPI() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const telegramToken = scriptProps.getProperty('TELEGRAM_TOKEN');
    
    if (!telegramToken) {
      results.message = 'TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      return results;
    }
    
    results.details.push(`‚úÖ TELEGRAM_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ Telegram API
    const telegramFunctions = [
      'sendText',
      'sendChatAction', 
      'answerCallbackQuery',
      'editMessageText',
      'escapeMarkdownV2'
    ];
    
    telegramFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    try {
      const url = `https://api.telegram.org/bot${telegramToken}/getMe`;
      const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true });
      const responseCode = response.getResponseCode();
      
      if (responseCode === 200) {
        const data = JSON.parse(response.getContentText());
        if (data.ok) {
          results.details.push(`‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @${data.result.username}`);
          results.details.push(`ü§ñ –ò–º—è –±–æ—Ç–∞: ${data.result.first_name}`);
          results.passed = true;
          results.message = 'Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
        } else {
          results.message = `–û—à–∏–±–∫–∞ Telegram API: ${data.description}`;
        }
      } else {
        results.message = `HTTP –æ—à–∏–±–∫–∞: ${responseCode}`;
      }
      
    } catch (error) {
      results.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error.message}`;
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function testUserDataSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const userFunctions = [
      'getUserData',
      'saveUserParam',
      'onboardUser'
    ];
    
    let functionsAvailable = 0;
    
    userFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
          functionsAvailable++;
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const testChatId = 'test_' + Date.now();
      const testUserData = {
        id: testChatId,
        first_name: 'Test User',
        username: 'testuser'
      };
      
      results.details.push(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testChatId}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –æ—à–∏–±–æ–∫
      if (functionsAvailable >= 2) {
        results.details.push(`‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã`);
        results.passed = true;
        results.message = '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç';
      } else {
        results.message = '–ù–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã';
      }
      
    } catch (error) {
      results.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π
 */
function testSessionSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const sessionFunctions = [
      'getSession',
      'startSession',
      'updateSession',
      'clearSession'
    ];
    
    let functionsAvailable = 0;
    
    sessionFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
          functionsAvailable++;
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Å–µ—Å—Å–∏—è–º–∏
    if (functionsAvailable >= 3) {
      try {
        const testChatId = 'session_test_' + Date.now();
        
        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        startSession(testChatId, 'test_input', { testData: 'value' });
        results.details.push(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è ${testChatId}`);
        
        // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const session = getSession(testChatId);
        if (session && session.awaitingInput === 'test_input') {
          results.details.push(`‚úÖ –°–µ—Å—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
        } else {
          results.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏`);
        }
        
        // –¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏
        clearSession(testChatId);
        const clearedSession = getSession(testChatId);
        if (!clearedSession.awaitingInput) {
          results.details.push(`‚úÖ –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
          results.passed = true;
          results.message = '–°–∏—Å—Ç–µ–º–∞ —Å–µ—Å—Å–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
        } else {
          results.details.push(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏`);
        }
        
      } catch (error) {
        results.details.push(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–π: ${error.message}`);
      }
    } else {
      results.message = '–ù–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ—Å—Å–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã';
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–µ—Å—Å–∏–π: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç UI —Å–∏—Å—Ç–µ–º—ã
 */
function testUISystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const uiFunctions = [
      'getMenu',
      'sendMenu',
      'sendSettingsMenu',
      'sendGoalOptions',
      'sendSexOptions',
      'sendActivityOptions'
    ];
    
    let functionsAvailable = 0;
    
    uiFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
          functionsAvailable++;
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    if (functionsAvailable >= 4) {
      results.passed = true;
      results.message = 'UI —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
    } else {
      results.message = '–ù–µ –≤—Å–µ UI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã';
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ UI —Å–∏—Å—Ç–µ–º—ã: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–æ–≤
 */
function testCalculationSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ BMR
    try {
      const func = eval('calculateBMR');
      if (typeof func === 'function') {
        results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è calculateBMR: –¥–æ—Å—Ç—É–ø–Ω–∞`);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const testUserData = {
          weight: 70,
          height: 175,
          age: 30,
          sex: 'm',
          activity: 'moderate',
          goal: 'maintain'
        };
        
        const bmrResult = calculateBMR(testUserData);
        if (bmrResult && bmrResult.dailyCalories) {
          results.details.push(`‚úÖ –†–∞—Å—á–µ—Ç BMR —Ä–∞–±–æ—Ç–∞–µ—Ç: ${bmrResult.dailyCalories} –∫–∫–∞–ª`);
          results.details.push(`üìä –ë–µ–ª–∫–∏: ${bmrResult.protein}–≥, –ñ–∏—Ä—ã: ${bmrResult.fats}–≥, –£–≥–ª–µ–≤–æ–¥—ã: ${bmrResult.carbs}–≥`);
          results.passed = true;
          results.message = '–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
        } else {
          results.message = '–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–µ BMR';
        }
        
      } else {
        results.message = '–§—É–Ω–∫—Ü–∏—è calculateBMR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
      }
    } catch (error) {
      results.message = `–û—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ calculateBMR: ${error.message}`;
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—á–µ—Ç–æ–≤: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç Gemini AI
 */
function testGeminiAPI() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const geminiKey = scriptProps.getProperty('GEMINI_API_KEY');
    
    if (!geminiKey) {
      results.message = 'GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)';
      results.passed = true; // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      return results;
    }
    
    results.details.push(`‚úÖ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ Gemini
    const geminiFunctions = [
      'callGemini',
      'generateAiMenu',
      'generateShoppingListAi'
    ];
    
    let functionsAvailable = 0;
    
    geminiFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
          functionsAvailable++;
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    if (functionsAvailable >= 1) {
      results.passed = true;
      results.message = 'Gemini AI —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞';
    } else {
      results.message = 'Gemini AI —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Gemini API: ${error.message}`;
  }
  
  return results;
}

/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
 */
function testWebhookSystem() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const webhookFunctions = [
      'doPost',
      'debugRouter',
      'handleIncomingUpdate',
      'handleCommand',
      'handleCallbackQuery'
    ];
    
    let functionsAvailable = 0;
    
    webhookFunctions.forEach(funcName => {
      try {
        const func = eval(funcName);
        if (typeof func === 'function') {
          results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName}: –¥–æ—Å—Ç—É–ø–Ω–∞`);
          functionsAvailable++;
        } else {
          results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      } catch (error) {
        results.details.push(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName}: –æ—à–∏–±–∫–∞ - ${error.message}`);
      }
    });
    
    if (functionsAvailable >= 3) {
      results.passed = true;
      results.message = '–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç';
    } else {
      results.message = '–ù–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ webhook –¥–æ—Å—Ç—É–ø–Ω—ã';
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ webhook —Å–∏—Å—Ç–µ–º—ã: ${error.message}`;
  }
  
  return results;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
function generateTestReport(testResults) {
  try {
    Logger.log('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    Logger.log('=' .repeat(50));
    Logger.log(`üïê –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${testResults.timestamp}`);
    Logger.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${testResults.passed}/${testResults.tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    Logger.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((testResults.passed / testResults.tests.length) * 100)}%`);
    
    testResults.tests.forEach((test, index) => {
      Logger.log(`\n${index + 1}. ${test.name}`);
      Logger.log(`   –°—Ç–∞—Ç—É—Å: ${test.passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø'}`);
      Logger.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${test.message}`);
      
      if (test.details && test.details.length > 0) {
        Logger.log('   –î–µ—Ç–∞–ª–∏:');
        test.details.forEach(detail => {
          Logger.log(`     ${detail}`);
        });
      }
    });
    
    if (testResults.errors.length > 0) {
      Logger.log('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:');
      testResults.errors.forEach(error => {
        Logger.log(`   ${error}`);
      });
    }
    
    Logger.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
    testResults.tests.forEach(test => {
      if (!test.passed) {
        Logger.log(`   ‚Ä¢ ${test.name}: ${test.message}`);
      }
    });
    
  } catch (error) {
    Logger.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${error.message}`);
  }
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
 */
function testQuick() {
  Logger.log('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ ScriptProperties
    const scriptProps = PropertiesService.getScriptProperties();
    Logger.log('‚úÖ ScriptProperties –¥–æ—Å—Ç—É–ø–Ω—ã');
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
    const token = scriptProps.getProperty('TELEGRAM_BOT_TOKEN');
    const geminiKey = scriptProps.getProperty('GEMINI_API_KEY');
    
    Logger.log('TELEGRAM_BOT_TOKEN: ' + (token ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
    Logger.log('GEMINI_API_KEY: ' + (geminiKey ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫
    const rootFolderId = scriptProps.getProperty('ROOT_FOLDER_ID');
    if (rootFolderId) {
      try {
        const folder = DriveApp.getFolderById(rootFolderId);
        Logger.log('‚úÖ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ' + folder.getName());
      } catch (error) {
        Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ: ' + error.message);
      }
    } else {
      Logger.log('‚ö†Ô∏è ROOT_FOLDER_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    const templateId = scriptProps.getProperty('TEMPLATE_SHEET_ID');
    if (templateId) {
      try {
        const sheet = SpreadsheetApp.openById(templateId);
        Logger.log('‚úÖ –®–∞–±–ª–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: ' + sheet.getName());
        
        const sheets = sheet.getSheets();
        Logger.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: ' + sheets.length);
        sheets.forEach(sheet => {
          Logger.log('  - ' + sheet.getName());
        });
      } catch (error) {
        Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ: ' + error.message);
      }
    } else {
      Logger.log('‚ö†Ô∏è TEMPLATE_SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    Logger.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure
    if (typeof setupCompleteInfrastructure === 'function') {
      Logger.log('‚úÖ setupCompleteInfrastructure –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      Logger.log('‚ùå setupCompleteInfrastructure –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è getProjectData
    if (typeof getProjectData === 'function') {
      Logger.log('‚úÖ getProjectData –Ω–∞–π–¥–µ–Ω–∞');
    } else {
      Logger.log('‚ùå getProjectData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    Logger.log('üèÅ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
    
  } catch (error) {
    Logger.log('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ' + error.message);
    Logger.log('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ' + error.stack);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 */
function testSetupInfrastructure() {
  Logger.log('üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´');
  
  try {
    if (typeof setupCompleteInfrastructure === 'function') {
      const results = setupCompleteInfrastructure();
      Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
      Logger.log(JSON.stringify(results, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ' + error.message);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
 */
function testProjectManagement() {
  Logger.log('üìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–û–ú');
  
  try {
    if (typeof getProjectData === 'function') {
      const data = getProjectData();
      Logger.log('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞:');
      Logger.log(JSON.stringify(data, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è getProjectData –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
 */
function testAddTask() {
  Logger.log('‚ûï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ò');
  
  try {
    if (typeof addNewTask === 'function') {
      const taskData = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
        priority: '–°—Ä–µ–¥–Ω–∏–π',
        assignee: '–¢–µ—Å—Ç–µ—Ä',
        deadline: '2024-12-31'
      };
      
      const result = addNewTask(taskData);
      Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:');
      Logger.log(JSON.stringify(result, null, 2));
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è addNewTask –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message);
  }
}