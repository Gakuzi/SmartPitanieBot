// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
function doPost(e) {
  let chatId, data;
  try {
    if (!e || !e.postData || !e.postData.contents) {
      Logger.log("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram.");
      return;
    }
    data = JSON.parse(e.postData.contents);

    if (data.callback_query) {
      handleCallbackQuery(data.callback_query);
      return;
    }

    if (data.message && data.message.chat && data.message.text) {
      chatId = data.message.chat.id;
      const msgRaw = data.message.text.trim();
      const msg = msgRaw.toLowerCase();
      const session = getSession(chatId);

      if (session && session.awaitingInput) {
        handleUserInput(chatId, msgRaw, session);
      } else {
        handleCommand(chatId, msg, msgRaw);
      }
      return;
    }

    Logger.log("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: " + e.postData.contents);

  } catch (err) {
    chatId = (data && data.message) ? data.message.chat.id : (data && data.callback_query) ? data.callback_query.from.id : null;
    if (chatId) {
      sendText(chatId, `--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${err.message}\n–°—Ç–µ–∫: ${err.stack}`);
    }
    Logger.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ doPost: ${err.message} ${err.stack}`);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const [action, value] = callbackQuery.data.split(':');

  answerCallbackQuery(callbackQuery.id);

  if (action === 'setGoal') {
    const userData = saveUserParam(chatId, 'goal', value);
    editMessageText(chatId, messageId, `–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *${value}*`);
    
    // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if (userData.weight && userData.goal) {
        triggerNutritionCalculation(chatId, userData);
    }
    sendMenu(chatId);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
function handleCommand(chatId, msg, msgRaw) {
  switch (msg) {
    case '/start':
      return sendStart(chatId);
    case '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
      return sendSettingsMenu(chatId);
    case '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥':
      return sendMenu(chatId);
    case 'ü•Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å':
      return sendGoalOptions(chatId);
    case '‚öñÔ∏è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
      startSession(chatId, 'awaitParams');
      return sendText(chatId, '–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: –≤–µ—Å(–∫–≥), —Ä–æ—Å—Ç(—Å–º), –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(m/f), —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏(–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)');
    case 'üïí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
      startSession(chatId, 'awaitNotifyTime');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)');
    case 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
      return sendTodayMenu(chatId);
    case 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
      return sendShoppingList(chatId);
    case 'üë®‚Äçüç≥ —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º?':
      return sendCookingList(chatId);
    case 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞':
      return sendText(chatId, '–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥');
    default:
      if (msg.startsWith('üîÑ –∑–∞–º–µ–Ω–∞')) return sendSubstitute(chatId, msgRaw);
      return sendMenu(chatId);
  }
}

// --- –°–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ---
function handleUserInput(chatId, input, session) {
  switch (session.awaitingInput) {
    case 'awaitParams':
      const parts = input.split(',').map(x => x.trim());
      if (parts.length !== 5) {
        sendText(chatId, '–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –í–≤–µ–¥–∏: –≤–µ—Å, —Ä–æ—Å—Ç, –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª(m/f), –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å(–Ω–∏–∑–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–≤—ã—Å–æ–∫–∏–π)');
        return;
      }
      const [weight, height, age, sex, activity] = parts;
      if (isNaN(weight) || isNaN(height) || isNaN(age) || !['m', 'f'].includes(sex.toLowerCase()) || !['–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'].includes(activity.toLowerCase())) {
        sendText(chatId, '–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: 70, 175, 40, m, —Å—Ä–µ–¥–Ω–∏–π');
        return;
      }
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      let userData = saveUserParam(chatId, 'weight', weight);
      userData = saveUserParam(chatId, 'height', height);
      userData = saveUserParam(chatId, 'age', age);
      userData = saveUserParam(chatId, 'sex', sex.toLowerCase());
      userData = saveUserParam(chatId, 'activity', activity.toLowerCase());
      
      clearSession(chatId);
      sendText(chatId, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');

      // –ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
      if (userData.weight && userData.goal) {
          triggerNutritionCalculation(chatId, userData);
      }
      sendMenu(chatId);
      break;

    case 'awaitNotifyTime':
      if (validateTimeFormat(input)) {
        saveUserParam(chatId, 'notifyTime', input);
        clearSession(chatId);
        sendText(chatId, `–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *${input}*`, getMenu(chatId));
      } else {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      }
      break;

    default:
      clearSession(chatId);
      sendText(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.', getMenu(chatId));
      break;
  }
}
