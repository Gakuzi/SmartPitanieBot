const ALL_COMMANDS = [
  '/start', '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥', 'ü•Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å', '‚öñÔ∏è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
  'üïí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', 'üë®‚Äçüç≥ —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º?', 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞'
];

function isCommand(msg) {
  return ALL_COMMANDS.includes(msg.toLowerCase());
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
function doPost(e) {
  let chatId, data;
  try {
    if (!e || !e.postData || !e.postData.contents) {
      Logger.log("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram.");
      return;
    }
    data = JSON.parse(e.postData.contents);

    if (data.callback_query) {
      handleCallbackQuery(data.callback_query);
      return;
    }

    if (data.message && data.message.chat && data.message.text) {
      chatId = data.message.chat.id;
      const msgRaw = data.message.text.trim();
      const msg = msgRaw.toLowerCase();
      const session = getSession(chatId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –ø—Ä–µ—Ä—ã–≤–∞—é—â–µ–π —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥
      if (session && session.awaitingInput && isCommand(msg)) {
        clearSession(chatId);
        handleCommand(chatId, msg, msgRaw); // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
      } else if (session && session.awaitingInput) {
        handleUserInput(chatId, msgRaw, session); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–≤–æ–¥
      } else {
        handleCommand(chatId, msg, msgRaw); // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      }
      return;
    }

    Logger.log("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: " + e.postData.contents);

  } catch (err) {
    chatId = (data && data.message) ? data.message.chat.id : (data && data.callback_query) ? data.callback_query.from.id : null;
    if (chatId) {
      sendText(chatId, `--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${err.message}\n–°—Ç–µ–∫: ${err.stack}`);
    }
    Logger.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ doPost: ${err.message} ${err.stack}`);
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const messageId = callbackQuery.message.message_id;
  const [action, value] = callbackQuery.data.split(':');
  const session = getSession(chatId);

  answerCallbackQuery(callbackQuery.id);

  if (action === 'setGoal') {
    const userData = saveUserParam(chatId, 'goal', value);
    editMessageText(chatId, messageId, `–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *${value}*`);
    if (userData.weight && userData.goal) {
        triggerNutritionCalculation(chatId, userData);
    }
    sendMenu(chatId);
    return;
  }

  if (action === 'set_sex') {
    editMessageText(chatId, messageId, `–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: *${value === 'm' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}*`);
    session.data.sex = value;
    updateSession(chatId, 'awaiting_activity', session.data);
    sendActivityOptions(chatId);
    return;
  }

  if (action === 'set_activity') {
    editMessageText(chatId, messageId, `–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: *${value}*`);
    session.data.activity = value;
    // –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å—á–∏—Ç–∞–µ–º
    let userData = saveUserParam(chatId, 'weight', session.data.weight);
    userData = saveUserParam(chatId, 'height', session.data.height);
    userData = saveUserParam(chatId, 'age', session.data.age);
    userData = saveUserParam(chatId, 'sex', session.data.sex);
    userData = saveUserParam(chatId, 'activity', session.data.activity);
    
    clearSession(chatId);
    sendText(chatId, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');

    if (userData.weight && userData.goal) {
        triggerNutritionCalculation(chatId, userData);
    }
    sendMenu(chatId);
    return;
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
function handleCommand(chatId, msg, msgRaw) {
  if (msg === '/start') {
    onboardUser(chatId); // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å AI –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    const prompt = "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–¥–∏–µ—Ç–æ–ª–æ–≥ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ \"–°–º–∞—Ä—Ç–ï–¥–∞\". –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ó–∞–¥–∞–π –µ–º—É –æ–¥–∏–Ω-–¥–≤–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–ø—Ä–æ—Å–∏, –∫–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç –∏ –∫–∞–∫–æ–π —É –Ω–µ–≥–æ –æ–ø—ã—Ç –≤ –ø–æ–¥—Å—á–µ—Ç–µ –∫–∞–ª–æ—Ä–∏–π. –ì–æ–≤–æ—Ä–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.";
    const aiResponse = callGemini(prompt);
    
    if (aiResponse) {
      startSession(chatId, 'awaiting_intro_response');
      sendText(chatId, aiResponse);
    } else {
      sendText(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–æ–π AI-–º–æ–¥—É–ª—å —Å–µ–π—á–∞—Å –Ω–µ –≤ —Å–µ—Ç–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–µ–º—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.", getMenu(chatId));
    }
    return;
  }

  switch (msg) {
    case '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
      return sendSettingsMenu(chatId);
    case '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥':
      return sendMenu(chatId);
    case 'ü•Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å':
      return sendGoalOptions(chatId);
    case '‚öñÔ∏è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
      startSession(chatId, 'awaiting_weight');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):');
    case 'üïí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
      startSession(chatId, 'awaitNotifyTime');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)');
    case 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
      return sendTodayMenu(chatId);
    case 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
      return sendShoppingList(chatId);
    case 'üë®‚Äçüç≥ —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º?':
      return sendCookingList(chatId);
    case 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞':
      return sendText(chatId, '–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥');
    default:
      if (msg.startsWith('üîÑ –∑–∞–º–µ–Ω–∞')) return sendSubstitute(chatId, msgRaw);
      return sendMenu(chatId);
  }
}

// --- –°–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ---
function handleUserInput(chatId, input, session) {
  switch (session.awaitingInput) {
    case 'awaiting_weight':
      if (isNaN(input) || input <= 0) {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70');
        return;
      }
      session.data.weight = Number(input);
      updateSession(chatId, 'awaiting_height', session.data);
      sendText(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):');
      break;

    case 'awaiting_height':
      if (isNaN(input) || input <= 0) {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 175');
        return;
      }
      session.data.height = Number(input);
      updateSession(chatId, 'awaiting_age', session.data);
      sendText(chatId, '–ü—Ä–∏–Ω—è—Ç–æ. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?');
      break;

    case 'awaiting_age':
      if (isNaN(input) || input <= 0) {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30');
        return;
      }
      session.data.age = Number(input);
      updateSession(chatId, 'awaiting_sex', session.data);
      sendSexOptions(chatId);
      break;

    case 'awaiting_intro_response':
      // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AI –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
      const prompt = `–¢—ã ‚Äî AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ï–≥–æ –æ—Ç–≤–µ—Ç: "${input}". –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é (–ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∞–ª–ª–µ—Ä–≥–∏–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è). –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –í –∫–æ–Ω—Ü–µ, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫–∞–∂–∏: "–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ–±—Ä–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á–µ—Ç—É –≤–∞—à–µ–≥–æ –ö–ë–ñ–£ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ–Ω—é."`;
      const aiResponse = callGemini(prompt);
      if (aiResponse) {
        sendText(chatId, aiResponse);
        // –ï—Å–ª–∏ AI —Ä–µ—à–∏–ª, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        if (aiResponse.includes("–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ–±—Ä–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")) {
          clearSession(chatId);
          // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
          sendMenu(chatId);
        } else {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
          startSession(chatId, 'awaiting_intro_response');
        }
      } else {
        sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", getMenu(chatId));
        clearSession(chatId);
      }
      break;

    case 'awaitNotifyTime':
      if (validateTimeFormat(input)) {
        saveUserParam(chatId, 'notifyTime', input);
        clearSession(chatId);
        sendText(chatId, `–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *${input}*`, getMenu(chatId));
      } else {
        sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      }
      break;

    default:
      clearSession(chatId);
      sendText(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.', getMenu(chatId));
      break;
  }
}