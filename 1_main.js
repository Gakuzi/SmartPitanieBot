const ALL_COMMANDS = [
  '/start', 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é', 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞'
];

function isCommand(msg) {
  return ALL_COMMANDS.includes(msg.toLowerCase());
}



// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
 */
function handleCallbackQuery(callbackQuery) {
  const data = callbackQuery.data;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ callback'—ã
  if (data.startsWith('admin_')) {
    handleAdminCallback(callbackQuery);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö callback'–æ–≤
  switch (data) {
    case 'back_to_main':
      const mainMenu = getMainMenu(callbackQuery.from.id);
      editMessageText(callbackQuery.message.chat.id, callbackQuery.message.message_id, mainMenu.text, mainMenu.reply_markup);
      break;
      
    case 'menu_nutrition':
      handleNutritionMenu(callbackQuery.from.id);
      break;
      
    case 'shopping_list':
      handleShoppingList(callbackQuery.from.id);
      break;
      
    case 'settings':
      handleSettings(callbackQuery.from.id);
      break;
      
    case 'statistics':
      handleStatistics(callbackQuery.from.id);
      break;
      
    case 'product_replacements':
      handleProductReplacements(callbackQuery.from.id);
      break;
      
    case 'food_diary':
      handleFoodDiary(callbackQuery.from.id);
      break;
      
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
    case 'admin_add_task':
      handleAdminAddTask(callbackQuery.from.id);
      break;
      
    case 'admin_full_stats':
      handleAdminFullStats(callbackQuery.from.id);
      break;
      
    case 'admin_refresh_data':
      handleAdminRefreshData(callbackQuery.from.id);
      break;
      
    case 'admin_all_tasks':
      handleAdminAllTasks(callbackQuery.from.id);
      break;
      
    default:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤
      handleOtherCallbacks(callbackQuery);
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  answerCallbackQuery(callbackQuery.id);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö callback'–æ–≤
 */
function handleOtherCallbacks(callbackQuery) {
  const data = callbackQuery.data;
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö callback'–æ–≤
  if (data.startsWith('goal_')) {
    handleGoalSelection(callbackQuery);
  } else if (data.startsWith('sex_')) {
    handleSexSelection(callbackQuery);
  } else if (data.startsWith('activity_')) {
    handleActivitySelection(callbackQuery);
  } else {
    sendText(callbackQuery.from.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  }
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ---
function handleCommand(chatId, msg, msgRaw, messageData) {
  if (msg === '/start') {
    onboardUser(chatId, messageData.from); // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    const userFirstName = messageData.from.first_name || messageData.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    startSetupDialog(chatId, userFirstName); // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    sendMenu(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    return;
  }


  switch (msg) {
    case '‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
      return sendSettingsMenu(chatId);
    case '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥':
      return sendMenu(chatId);
    case 'ü•Ö —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å':
      return sendGoalOptions(chatId);
    case '‚öñÔ∏è –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã':
      startSession(chatId, 'awaiting_weight');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):');
    case 'üïí —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π':
      startSession(chatId, 'awaitNotifyTime');
      return sendText(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30)');
    case 'üçΩ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
      if (isAiMode()) {
        const userData = getUserData(chatId);
        if (userData.weight && userData.goal) {
          triggerNutritionCalculation(chatId, userData);
        } else {
          sendText(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
        }
      } else {
        const userData = getUserData(chatId);
        try {
          const bmrData = calculateBMR(userData);
          const menu = generateMenu(bmrData);
          sendText(chatId, menu);
        } catch (e) {
          sendText(chatId, `–û—à–∏–±–∫–∞: ${e.message}`);
        }
      }
      return;
    case 'üõí —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫':
      return sendShoppingList(chatId);
    case 'üë®‚Äçüç≥ —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º?':
      return sendCookingList(chatId);
    case 'üîÑ –∑–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞':
      return sendText(chatId, '–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥');
    default:
      if (msg.startsWith('üîÑ –∑–∞–º–µ–Ω–∞')) return sendSubstitute(chatId, msgRaw);
      return sendMenu(chatId);
  }
}

// --- –°–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ---
function handleUserInput(chatId, input, session) {
  Logger.log(`handleUserInput: –í—ã–∑–≤–∞–Ω–∞ –¥–ª—è chatId: ${chatId}, input: ${input}, awaitingInput: ${session.awaitingInput}`);
  if (session.awaitingInput) {
    switch (session.awaitingInput) {
      case 'awaiting_name_confirmation':
        const lowerInput = input.toLowerCase();
        let userNameToSave;

        if (lowerInput.includes('–¥–∞') || lowerInput.includes('–≤–µ—Ä–Ω–æ') || lowerInput.includes('yes')) {
          // User confirmed the Telegram name
          const telegramUser = session.data.telegramUser;
          userNameToSave = telegramUser.first_name || telegramUser.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          sendText(chatId, `–û—Ç–ª–∏—á–Ω–æ, ${userNameToSave}!`);
        } else {
          // User provided a different name or wants to specify
          userNameToSave = input;
          sendText(chatId, `–•–æ—Ä–æ—à–æ, –±—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –∫–∞–∫ ${userNameToSave}.`);
        }
        saveUserParam(chatId, 'name', userNameToSave); // Save the user's preferred name
        updateSession(chatId, 'awaiting_weight', session.data); // Transition to awaiting weight
        sendText(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):');
        break;

      case 'awaiting_weight':
        if (isNaN(input) || input <= 0) {
          sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 70');
          return;
        }
        session.data.weight = Number(input);
        saveUserParam(chatId, 'weight', session.data.weight);
        updateSession(chatId, 'awaiting_height', session.data);
        sendText(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):');
        break;

      case 'awaiting_height':
        if (isNaN(input) || input <= 0) {
          sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 175');
          return;
        }
        session.data.height = Number(input);
        saveUserParam(chatId, 'height', session.data.height);
        updateSession(chatId, 'awaiting_age', session.data);
        sendText(chatId, '–ü—Ä–∏–Ω—è—Ç–æ. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?');
        break;

      case 'awaiting_age':
        if (isNaN(input) || input <= 0) {
          sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 30');
          return;
        }
        session.data.age = Number(input);
        saveUserParam(chatId, 'age', session.data.age);
        updateSession(chatId, 'awaiting_sex', session.data);
        sendSexOptions(chatId);
        break;

      case 'awaiting_intro_response':
        if (!isAiModeEnabled()) {
          sendText(chatId, "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é.", getMenu(chatId));
          clearSession(chatId);
          return;
        }
        // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è AI –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        const prompt = `–¢—ã ‚Äî AI-–¥–∏–µ—Ç–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. –ï–≥–æ –æ—Ç–≤–µ—Ç: "${input}". –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∏–∞–ª–æ–≥, –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é (–ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∞–ª–ª–µ—Ä–≥–∏–∏, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è). –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. –í –∫–æ–Ω—Ü–µ, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫–∞–∂–∏: "–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ–±—Ä–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞—Å—á–µ—Ç—É –≤–∞—à–µ–≥–æ –ö–ë–ñ–£ –∏ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ–Ω—é."`;
        const aiResponse = callGemini(prompt);
        if (aiResponse) {
          sendText(chatId, aiResponse);
          // –ï—Å–ª–∏ AI —Ä–µ—à–∏–ª, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          if (typeof aiResponse === 'string' && aiResponse.includes("–û—Ç–ª–∏—á–Ω–æ, —è —Å–æ–±—Ä–∞–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")) {
            clearSession(chatId);
            // –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
            sendMenu(chatId);
          } else {
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∏–∞–ª–æ–≥
            startSession(chatId, 'awaiting_intro_response');
          }
        } else {
          sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", getMenu(chatId));
          clearSession(chatId);
        }
        break;

      case 'awaitNotifyTime':
        if (validateTimeFormat(input)) {
          saveUserParam(chatId, 'notifyTime', input);
          clearSession(chatId);
          sendText(chatId, `–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *${input}*`, getMenu(chatId));
        } else {
          sendText(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
        }
        break;

      default:
        clearSession(chatId);
        sendText(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞. –í–∞—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–±—Ä–æ—à–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –µ—â–µ —Ä–∞–∑.', getMenu(chatId));
        break;
    }
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –≤–≤–µ–ª –Ω–µ –∫–æ–º–∞–Ω–¥—É, —Å–æ–æ–±—â–∞–µ–º –µ–º—É –æ–± —ç—Ç–æ–º
    sendText(chatId, "–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.", getMenu(chatId));
  }
}

function onboardUser(chatId, from) {
  const scriptProps = PropertiesService.getScriptProperties();
  const userFolderId = scriptProps.getProperty(String(chatId));
  if (userFolderId) return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

  const rootFolder = DriveApp.getFolderById(scriptProps.getProperty('ROOT_FOLDER_ID'));
  const userFolder = rootFolder.createFolder(String(chatId));
  const userSpreadsheet = SpreadsheetApp.create(`${from.first_name || 'user'}_${chatId}`);
  const userFile = DriveApp.getFileById(userSpreadsheet.getId());
  userFolder.addFile(userFile);
  DriveApp.getRootFolder().removeFile(userFile); // –£–±–∏—Ä–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è –¥–∏—Å–∫–∞

  scriptProps.setProperty(String(chatId), userFolder.getId());

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ userProps –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  saveUserParam(chatId, 'sheetId', userSpreadsheet.getId());
  saveUserParam(chatId, 'sheetUrl', userSpreadsheet.getUrl());
  saveUserParam(chatId, 'folderId', userFolder.getId());
  saveUserParam(chatId, 'folderUrl', userFolder.getUrl());

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É
  const usersSsId = scriptProps.getProperty('USERS_SPREADSHEET_ID');
  if (usersSsId) {
    const usersSs = SpreadsheetApp.openById(usersSsId);
    const usersSheet = usersSs.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    usersSheet.appendRow([
      from.id,
      from.is_bot,
      from.first_name || '',
      from.last_name || '',
      from.username || '',
      from.language_code || '',
      from.is_premium || false,
      new Date(),
      `=HYPERLINK("${userFolder.getUrl()}"; "${userFolder.getId()}")`,
      `=HYPERLINK("${userSpreadsheet.getUrl()}"; "${userSpreadsheet.getId()}")`,
      '–°—Ç–∞–Ω–¥–∞—Ä—Ç', // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      false // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ]);
  }
}

function handleGoalSelection(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const data = callbackQuery.data; // goal_loss | goal_maintenance | goal_gain
  const goalMap = { goal_loss: 'loss', goal_maintenance: 'maintenance', goal_gain: 'gain' };
  const goal = goalMap[data];
  if (!goal) return;
  saveUserParam(chatId, 'goal', goal);
  sendText(chatId, '–¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:');
  sendActivityOptions(chatId);
}

function handleSexSelection(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const data = callbackQuery.data; // sex_male | sex_female
  const gender = data === 'sex_male' ? 'male' : 'female';
  saveUserParam(chatId, 'gender', gender);
  sendText(chatId, '–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:');
  sendActivityOptions(chatId);
}

function handleActivitySelection(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const data = callbackQuery.data; // activity_minimal ... activity_extreme
  const activityLevel = data.replace('activity_', '');
  saveUserParam(chatId, 'activityLevel', activityLevel);
  sendText(chatId, '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏.');
  const userData = getUserData(chatId);
  if (userData.weight && userData.height && userData.age && userData.gender && userData.goal) {
    triggerNutritionCalculation(chatId, userData);
  }
}

function handleNutritionMenu(chatId) {
  sendTodayMenu(chatId);
}

function handleShoppingList(chatId) {
  sendShoppingList(chatId);
}

function handleSettings(chatId) {
  sendSettingsMenu(chatId);
}

function handleStatistics(chatId) {
  const userData = getUserData(chatId);
  const lines = [];
  if (userData.calories) {
    lines.push(`–ö–∞–ª–æ—Ä–∏–∏: ${userData.calories} –∫–∫–∞–ª`);
    lines.push(`–ë–µ–ª–∫–∏: ${userData.proteins || '-'} –≥, –ñ–∏—Ä—ã: ${userData.fats || '-'} –≥, –£–≥–ª–µ–≤–æ–¥—ã: ${userData.carbs || '-'} –≥`);
  } else {
    lines.push('–ü–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∏ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ö–ë–ñ–£.');
  }
  sendText(chatId, `–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n${lines.join('\n')}`);
}

function handleProductReplacements(chatId) {
  sendText(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ: "üîÑ –∑–∞–º–µ–Ω–∞ <–ø—Ä–æ–¥—É–∫—Ç>", –Ω–∞–ø—Ä–∏–º–µ—Ä: üîÑ –∑–∞–º–µ–Ω–∞ —Ç–≤–æ—Ä–æ–≥');
}

function handleFoodDiary(chatId) {
  sendText(chatId, '–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.');
}

// --- Session Management ---
function getSession(chatId) {
  const userProps = PropertiesService.getUserProperties();
  const session = userProps.getProperty(`session_${chatId}`);
  return session ? JSON.parse(session) : {};
}

function startSession(chatId, awaitingInput, data = {}) {
  const session = { awaitingInput, data };
  const userProps = PropertiesService.getUserProperties();
  userProps.setProperty(`session_${chatId}`, JSON.stringify(session));
}

function updateSession(chatId, awaitingInput, data) {
  startSession(chatId, awaitingInput, data);
}

function clearSession(chatId) {
  const userProps = PropertiesService.getUserProperties();
  userProps.deleteProperty(`session_${chatId}`);
}
