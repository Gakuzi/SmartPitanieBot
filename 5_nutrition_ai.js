/**
 * @file 5_nutrition_ai.js
 * @description –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI, —Ä–∞—Å—á–µ—Ç–æ–º –ö–ë–ñ–£ –∏ –≤–µ–¥–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤.
 */

// --- AI-–º–æ–¥—É–ª—å: –†–∞—Å—á–µ—Ç –ö–ë–ñ–£ ---
function calculateNutrition(userData) {
  const { weight, height, age, gender, activityLevel, goal } = userData;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!weight || !height || !age || !gender || !activityLevel || !goal) {
    Logger.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(userData)}`);
    return null;
  }

  // 1. –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR) –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
  let bmr;
  if (gender === 'male') {
    bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5;
  } else { // female
    bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161;
  }

  // 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const activityMultipliers = {
    minimal: 1.2,
    light: 1.375,
    medium: 1.55,
    high: 1.725,
    extreme: 1.9
  };
  const tdee = bmr * (activityMultipliers[activityLevel] || 1.2);

  // 3. –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ —Ü–µ–ª—å
  const goalMultipliers = { 
    loss: 0.85, 
    maintenance: 1.0, 
    gain: 1.15 
  };
  const finalCalories = Math.round(tdee * (goalMultipliers[goal] || 1.0));

  // 4. –†–∞—Å—á–µ—Ç –ë–ñ–£ (–≤ –≥—Ä–∞–º–º–∞—Ö)
  const bjuRatios = {
    loss:        { p: 0.40, f: 0.30, c: 0.30 }, // –ë–µ–ª–æ–∫ –≤—ã—à–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—à—Ü
    maintenance: { p: 0.30, f: 0.30, c: 0.40 },
    gain:        { p: 0.30, f: 0.25, c: 0.45 }  // –£–≥–ª–µ–≤–æ–¥—ã –≤—ã—à–µ –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏
  };
  const ratio = bjuRatios[goal] || bjuRatios['maintenance'];
  const proteins = Math.round((finalCalories * ratio.p) / 4);
  const fats = Math.round((finalCalories * ratio.f) / 9);
  const carbs = Math.round((finalCalories * ratio.c) / 4);

  return { calories: finalCalories, proteins, fats, carbs };
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * @param {string|number} chatId - ID —á–∞—Ç–∞.
 * @param {object} userData - –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
function triggerNutritionCalculation(chatId, userData) {
    const nutrition = calculateNutrition(userData);
    if (!nutrition) {
        sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ö–ë–ñ–£. –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.");
        return;
    }
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let finalUserData = saveUserParam(chatId, 'calories', nutrition.calories);
    finalUserData = saveUserParam(chatId, 'proteins', nutrition.proteins);
    finalUserData = saveUserParam(chatId, 'fats', nutrition.fats);
    finalUserData = saveUserParam(chatId, 'carbs', nutrition.carbs);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const message = `ü§ñ *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞:*

` +
                    `*–ö–∞–ª–æ—Ä–∏–∏:* ${nutrition.calories} –∫–∫–∞–ª/–¥–µ–Ω—å\n` +
                    `*–ë–µ–ª–∫–∏:* ${nutrition.proteins} –≥/–¥–µ–Ω—å\n` +
                    `*–ñ–∏—Ä—ã:* ${nutrition.fats} –≥/–¥–µ–Ω—å\n` +
                    `*–£–≥–ª–µ–≤–æ–¥—ã:* ${nutrition.carbs} –≥/–¥–µ–Ω—å\n\n` +
                    `–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.`;
    sendText(chatId, message);
}


// --- AI-–º–æ–¥—É–ª—å: –î–∏–∞–ª–æ–≥–∏ --- 

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.
 * @param {string|number} chatId - ID —á–∞—Ç–∞.
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
function startSetupDialog(chatId, userName) {
  if (!isAiModeEnabled()) {
    sendText(chatId, "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä—É—á–Ω—É—é.", getMenu(chatId));
    return;
  }
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  setUserState(chatId, STATES.AWAITING_SETUP);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º—Ç
  const prompt = generateAcquaintancePrompt(userName);
  
  // –í—ã–∑—ã–≤–∞–µ–º Gemini
  const geminiResponse = callGemini(prompt, chatId);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  sendFormattedText(chatId, geminiResponse);
}

/**
 * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.
 * @param {string|number} chatId - ID —á–∞—Ç–∞.
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} userMessage - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ callback_data).
 */
function continueSetupDialog(chatId, userName, userMessage) {
  let userData = getUserData(chatId) || {};

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data
  if (userMessage.startsWith('set_')) {
    const [_, param, value] = userMessage.split(':');
    userData = saveUserParam(chatId, param, value);
  } 
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  else if (!isNaN(parseInt(userMessage))) {
    const lastQuestion = findLastQuestion(userData);
    if (lastQuestion) {
      userData = saveUserParam(chatId, lastQuestion, parseInt(userMessage));
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  const prompt = generateSetupStepPrompt(userData, userName);
  const geminiResponse = callGemini(prompt, chatId);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
  sendFormattedText(chatId, geminiResponse);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
  if (isProfileComplete(userData)) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setUserState(chatId, STATES.IDLE);
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –ö–ë–ñ–£
    triggerNutritionCalculation(chatId, userData);
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–Ω—é
    generateMenu(chatId);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º.
 * @param {object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {string|null} - –ö–ª—é—á –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ('age', 'height', 'weight') –∏–ª–∏ null.
 */
function findLastQuestion(userData) {
  if (!userData.gender) return null; // –ü–æ–ª - –ø–µ—Ä–≤—ã–π, –Ω–æ –æ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (!userData.age) return 'age';
  if (!userData.height) return 'height';
  if (!userData.weight) return 'weight';
  return null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
 * @param {object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @returns {boolean} - true, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω—ã–π.
 */
function isProfileComplete(userData) {
    const requiredParams = ['gender', 'age', 'height', 'weight', 'goal', 'activityLevel'];
    return requiredParams.every(param => userData.hasOwnProperty(param) && userData[param] !== null);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é AI.
 * @param {string|number} chatId - ID —á–∞—Ç–∞.
 */
function generateMenu(chatId) {
  const userData = getUserData(chatId);

  if (!isProfileComplete(userData) || !userData.calories) {
    sendText(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –∏ —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é.");
    return;
  }

  sendText(chatId, "ü§ñ –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.");

  const prompt = generateMenuPrompt(userData);
  const menuResponse = callGemini(prompt);

  if (menuResponse.error) {
    sendText(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é: ${menuResponse.error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
    Logger.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è ${chatId}: ${menuResponse.details}`);
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  saveUserParam(chatId, 'todayMenu', menuResponse);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const formattedMenu = formatMenuForDisplay(menuResponse);
  sendText(chatId, formattedMenu);
  
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  const buttons = [
    [{ text: "üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫", callback_data: "get_shopping_list" }],
    [{ text: "üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞–º–µ–Ω—É", callback_data: "request_menu_change" }]
  ];
  sendText(chatId, "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", { inline_keyboard: buttons });
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ AI, –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç.
 * @param {number|string} chatId - ID —á–∞—Ç–∞.
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 */
function handleFreeText(chatId, text) {
  sendChatAction(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."

  const userData = getUserData(chatId);
  // –ü—Ä–æ–º–ø—Ç –æ–±–µ—Ä–Ω—É—Ç –≤ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤.
  const prompt = `–¢—ã ‚Äî AI-–¥–∏–µ—Ç–æ–ª–æ–≥ –≤ Telegram-–±–æ—Ç–µ. –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${JSON.stringify(userData)}. –û–Ω –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–±–µ: "${text}".

**–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Æ:**
1.  **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫—É Telegram.**
2.  –¢–≤–æ–π –æ—Ç–≤–µ—Ç **–î–û–õ–ñ–ï–ù** –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ JSON.

**–§–û–†–ú–ê–¢ JSON:**
\`\`\`json
{
  "response": "–¢–≤–æ–π –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤ MarkdownV2 –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.",
  "buttons": [
    {"text": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ 1", "callback_data": "action1:value1"}
  ]
}
\`\`\`
`;

  const aiResponse = callGemini(prompt, true); // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º JSON

  if (aiResponse && aiResponse.response) {
    const keyboard = aiResponse.buttons ? { inline_keyboard: [aiResponse.buttons] } : getMenu(chatId);
    // –û—Ç–≤–µ—Ç –æ—Ç AI —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    sendText(chatId, aiResponse.response, keyboard);
  } else if (aiResponse && aiResponse.error) {
    Logger.log(`–û—à–∏–±–∫–∞ AI –ø—Ä–∏ —Å–≤–æ–±–æ–¥–Ω–æ–º –æ–±—â–µ–Ω–∏–∏ –¥–ª—è ${chatId}: ${aiResponse.details}`);
    sendText(chatId, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ AI: ${aiResponse.error}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`, getMenu(chatId));
  } else {
    Logger.log(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è ${chatId}: ${JSON.stringify(aiResponse)}`);
    sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", getMenu(chatId));
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON-–æ–±—ä–µ–∫—Ç –º–µ–Ω—é –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
 * @param {object} menu - JSON-–æ–±—ä–µ–∫—Ç –º–µ–Ω—é.
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é.
 */
function formatMenuForDisplay(menu) {
  if (!menu || !menu.meals) return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–Ω—é.";

  let message = `*–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –¥–µ–Ω—å:*

`;
  message += `*–ö–ë–ñ–£: ${menu.summary.total_calories} –∫–∫–∞–ª, –ë:${menu.summary.total_proteins}–≥, –ñ:${menu.summary.total_fats}–≥, –£:${menu.summary.total_carbs}–≥*

`;

  menu.meals.forEach(meal => {
    message += `*${meal.name}: ${meal.recipe_name}*
`;
    message += `_${meal.description}_
`;
    message += `(–ö–ë–ñ–£: ${meal.calories} –∫–∫–∞–ª, –ë:${meal.proteins}–≥, –ñ:${meal.fats}–≥, –£:${meal.carbs}–≥)

`;
  });

  message += `–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ "üë®‚Äçüç≥ –ß—Ç–æ –≥–æ—Ç–æ–≤–∏–º?".`;

  return message;
}
