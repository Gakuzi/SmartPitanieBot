/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
function testSimple() {
  Logger.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  return '–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω';
}

function testSetup() {
  Logger.log('üîß –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure
    if (typeof setupCompleteInfrastructure === 'function') {
      Logger.log('‚úÖ –§—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
      const results = setupCompleteInfrastructure();
      Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
      Logger.log(JSON.stringify(results, null, 2));
      
      return results;
    } else {
      Logger.log('‚ùå –§—É–Ω–∫—Ü–∏—è setupCompleteInfrastructure –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
      return { error: '–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
  } catch (error) {
    Logger.log('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
    return { error: error.message };
  }
} 