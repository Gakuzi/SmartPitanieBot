/**
 * @file 3_ui_menus.js
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI, –º–µ–Ω—é –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ –≤ Google Sheets –∏ Telegram.
 */

// --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Google Sheets ---

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 */
function showAdminPanel() {
  const html = HtmlService.createHtmlOutputFromFile('AdminPanel')
    .setWidth(1200)
    .setHeight(800);
  SpreadsheetApp.getUi().showModalDialog(html, 'SmartPit Console ‚Äî –¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
}

function openProjectManagerWeb() {
  try {
    const html = HtmlService.createHtmlOutputFromFile('project-manager')
      .setWidth(1200)
      .setHeight(800);
    SpreadsheetApp.getUi().showModalDialog(html, '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ SmartPit');
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
  }
}

function openIdeaDoc() {
  try {
    const html = HtmlService.createHtmlOutputFromFile('idea')
      .setWidth(1000)
      .setHeight(700);
    SpreadsheetApp.getUi().showModalDialog(html, '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ SmartPit');
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¢–ó: ' + error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¢–ó: ' + error.message);
  }
}

function runQuickDiagnostics() {
  try {
    const ui = SpreadsheetApp.getUi();
    const results = Core.Diagnostics.runQuick();
    const message = Core.Diagnostics.formatReportForTelegram(results);
    ui.alert('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', message, ui.ButtonSet.OK);
  } catch (error) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
  }
}

function restoreTableStructure() {
  try {
    const ui = SpreadsheetApp.getUi();
    const result = Core.Diagnostics.autoRepair();
    ui.alert('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', result.success ? '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' : '–û—à–∏–±–∫–∞: ' + result.error, ui.ButtonSet.OK);
  } catch (error) {
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ' + error.message);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è AdminPanel
function testTelegramAPI() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const telegramToken = scriptProps.getProperty('TELEGRAM_TOKEN');
    
    if (!telegramToken) {
      results.message = 'TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      return results;
    }
    
    results.details.push(`‚úÖ TELEGRAM_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    try {
      const url = `https://api.telegram.org/bot${telegramToken}/getMe`;
      const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true });
      const responseCode = response.getResponseCode();
      
      if (responseCode === 200) {
        const data = JSON.parse(response.getContentText());
        if (data.ok) {
          results.details.push(`‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @${data.result.username}`);
          results.details.push(`ü§ñ –ò–º—è –±–æ—Ç–∞: ${data.result.first_name}`);
          results.passed = true;
          results.message = 'Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ';
        } else {
          results.message = `–û—à–∏–±–∫–∞ Telegram API: ${data.description}`;
        }
      } else {
        results.message = `HTTP –æ—à–∏–±–∫–∞: ${responseCode}`;
      }
      
    } catch (error) {
      results.message = `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error.message}`;
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Telegram API: ${error.message}`;
  }
  
  return results;
}

function testGeminiAPI() {
  const results = { passed: false, message: '', details: [] };
  
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const geminiApiKey = scriptProps.getProperty('GEMINI_API_KEY');
    
    if (!geminiApiKey) {
      results.message = 'GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
      return results;
    }
    
    results.details.push(`‚úÖ GEMINI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é callGemini
    try {
      if (typeof callGemini === 'function') {
        results.details.push(`‚úÖ –§—É–Ω–∫—Ü–∏—è callGemini: –¥–æ—Å—Ç—É–ø–Ω–∞`);
        results.passed = true;
        results.message = 'Gemini API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
      } else {
        results.message = '–§—É–Ω–∫—Ü–∏—è callGemini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
      }
    } catch (error) {
      results.message = `–û—à–∏–±–∫–∞ Gemini API: ${error.message}`;
    }
    
  } catch (error) {
    results.message = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Gemini API: ${error.message}`;
  }
  
  return results;
}

function setTelegramWebhook() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const telegramToken = scriptProps.getProperty('TELEGRAM_TOKEN');
    
    if (!telegramToken) {
      return { 
        success: false, 
        error: 'TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_TOKEN –≤ Script Properties'
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const webAppUrl = ScriptApp.getService().getUrl();
    Logger.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ URL: ${webAppUrl}`);
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    const deleteWebhookUrl = `https://api.telegram.org/bot${telegramToken}/deleteWebhook`;
    const deleteOptions = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify({ drop_pending_updates: true }),
      muteHttpExceptions: true
    };
    
    const deleteResponse = UrlFetchApp.fetch(deleteWebhookUrl, deleteOptions);
    Logger.log(`–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook: ${deleteResponse.getResponseCode()}`);
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    Utilities.sleep(500);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    const setWebhookUrl = `https://api.telegram.org/bot${telegramToken}/setWebhook`;
    const payload = {
      url: webAppUrl,
      allowed_updates: ["message", "edited_message", "callback_query", "my_chat_member"],
      drop_pending_updates: true,
      max_connections: 40
    };
    
    const setOptions = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(setWebhookUrl, setOptions);
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    const data = JSON.parse(responseText);
    
    Logger.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: ${responseCode} - ${responseText}`);
    
    if (responseCode === 200 && data.ok) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      Utilities.sleep(1000);
      const verification = getBasicWebhookInfo();
      
      return { 
        success: true, 
        message: 'Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω',
        url: webAppUrl,
        verification: verification,
        details: data.result
      };
    } else {
      return { 
        success: false, 
        error: data.description || `HTTP –æ—à–∏–±–∫–∞ ${responseCode}`,
        details: data
      };
    }
    
  } catch (error) {
    Logger.log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ${error.message}`);
    return { 
      success: false, 
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
      details: error.message,
      stack: error.stack 
    };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * @param {string} actionName - –ò–º—è –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
 */
function runAdminAction(actionName) {
  switch (actionName) {
    case 'setup':
      setupAdminSheet();
      break;
    case 'webhook':
      showWebhookManagerDialog();
      break;
    case 'clear':
      clearCurrentSheet(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
      break;
    case 'toggleProtection':
      toggleSheetProtection();
      break;
    case 'setTelegramToken':
      setTelegramToken();
      break;
    case 'setGeminiApiKey':
      setGeminiApiKey();
      break;
    case 'toggleMode':
      toggleMode();
      break;
    default:
      SpreadsheetApp.getUi().alert('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ' + actionName);
  }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (AI/–†—É—á–Ω–æ–π) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º getValue/setValue.
 */
function toggleMode() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settingsSheet = ss.getSheetByName('–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
  const ui = SpreadsheetApp.getUi();

  if (!settingsSheet) {
    ui.alert('–õ–∏—Å—Ç "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    return;
  }

  const modeCell = settingsSheet.getRange('B3');

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ —è—á–µ–π–∫–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–±–æ–∫—Å–∞
  const dataValidation = modeCell.getDataValidation();
  if (!dataValidation || dataValidation.getCriteriaType() !== SpreadsheetApp.DataValidationCriteria.CHECKBOX) {
    modeCell.setDataValidation(SpreadsheetApp.newDataValidation().requireCheckbox().build());
  }

  const isAiMode = modeCell.getValue() === true;

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
  modeCell.setValue(!isAiMode);

  const newMode = !isAiMode ? 'AI' : '–†—É—á–Ω–æ–π';
  ui.alert(`–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${newMode}`);
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º AI
 */
function toggleAiMode() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const currentMode = scriptProps.getProperty('AI_MODE') || 'enabled';
    const newMode = currentMode === 'enabled' ? 'disabled' : 'enabled';
    
    scriptProps.setProperty('AI_MODE', newMode);
    
    const ui = SpreadsheetApp.getUi();
    const status = newMode === 'enabled' ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
    ui.alert(`–†–µ–∂–∏–º AI ${status}`, `–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç ${status}.`, ui.ButtonSet.OK);
    
    Logger.log(`AI —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞: ${newMode}`);
    return { success: true, mode: newMode };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è AI —Ä–µ–∂–∏–º–∞: ' + error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è AI —Ä–µ–∂–∏–º–∞: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ AI —Ä–µ–∂–∏–º
 */
function isAiModeEnabled() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const aiMode = scriptProps.getProperty('AI_MODE') || 'enabled';
    return aiMode === 'enabled';
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Ä–µ–∂–∏–º–∞: ' + error.message);
    return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI
 */
function showAiSettingsDialog() {
  try {
    const isEnabled = isAiModeEnabled();
    const status = isEnabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
    const buttonText = isEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å AI' : '–í–∫–ª—é—á–∏—Ç—å AI';
    const description = isEnabled ? 
      'AI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –∏ –æ—Ç–≤–µ—Ç–æ–≤.' :
      'AI —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ AI —Ñ—É–Ω–∫—Ü–∏–π.';
    
    const html = HtmlService.createHtmlOutput(`
      <html>
        <head>
          <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI</title>
          <style>
            body { font-family: Arial, sans-serif; padding: 20px; }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .enabled { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
            .disabled { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
            .button { 
              background: #007bff; 
              color: white; 
              padding: 10px 20px; 
              border: none; 
              border-radius: 5px; 
              cursor: pointer; 
              margin: 5px;
            }
            .button:hover { background: #0056b3; }
            .button.danger { background: #dc3545; }
            .button.danger:hover { background: #c82333; }
          </style>
        </head>
        <body>
          <h2>ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</h2>
          <div class="status ${isEnabled ? 'enabled' : 'disabled'}">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> ${status}
          </div>
          <p>${description}</p>
          <button class="button ${isEnabled ? 'danger' : ''}" onclick="toggleAi()">
            ${buttonText}
          </button>
          <button class="button" onclick="google.script.host.close()">
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
          <script>
            function toggleAi() {
              google.script.run
                .withSuccessHandler(function(result) {
                  if (result.success) {
                    alert('AI —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω!');
                    google.script.host.close();
                  } else {
                    alert('–û—à–∏–±–∫–∞: ' + result.error);
                  }
                })
                .withFailureHandler(function(error) {
                  alert('–û—à–∏–±–∫–∞: ' + error.message);
                })
                .toggleAiMode();
            }
          </script>
        </body>
      </html>
    `).setWidth(500).setHeight(300);
    
    SpreadsheetApp.getUi().showModalDialog(html, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI');
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message);
  }
}

// --- –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ –≤ Google Sheets ---

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Google Sheets.
 */
function createCustomMenu() {
  const ui = SpreadsheetApp.getUi();
  const adminMenu = ui.createMenu('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ');

  adminMenu.addItem('–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'showAdminPanel');
  adminMenu.addItem('–û—Ç–∫—Ä—ã—Ç—å –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞', 'openProjectManagerWeb');
  adminMenu.addItem('–û—Ç–∫—Ä—ã—Ç—å –¢–ó (idea)', 'openIdeaDoc');
  adminMenu.addSeparator();
  adminMenu.addItem('–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'setupAdminSheet');
  adminMenu.addItem('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–º', 'showWebhookManagerDialog');
  adminMenu.addSeparator();
  adminMenu.addItem('–°–Ω—è—Ç—å/–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞—â–∏—Ç—É –ª–∏—Å—Ç–æ–≤', 'toggleSheetProtection');
  adminMenu.addSeparator();

  const settingsSubMenu = ui.createMenu('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
      .addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram', 'setTelegramToken')
      .addItem('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á Gemini', 'setGeminiApiKey');
      
  adminMenu.addSubMenu(settingsSubMenu);
  adminMenu.addToUi();
}

// showWebhookManagerDialog –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ ui_dialogs.js (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
 */
function getBasicWebhookInfo() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const telegramToken = scriptProps.getProperty('TELEGRAM_TOKEN');
    
    if (!telegramToken) {
      return {
        success: false,
        error: 'TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ Script Properties',
        details: '–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ Script Properties.'
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const currentWebAppUrl = ScriptApp.getService().getUrl();
    Logger.log(`–¢–µ–∫—É—â–∏–π WebApp URL: ${currentWebAppUrl}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    const webhookInfoUrl = `https://api.telegram.org/bot${telegramToken}/getWebhookInfo`;
    const response = UrlFetchApp.fetch(webhookInfoUrl, { 
      muteHttpExceptions: true,
      method: 'GET'
    });
    
    const responseCode = response.getResponseCode();
    const responseText = response.getContentText();
    
    if (responseCode !== 200) {
      return {
        success: false,
        error: `HTTP –æ—à–∏–±–∫–∞: ${responseCode}`,
        details: `Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–≤–µ—Ç: ${responseText}`
      };
    }
    
    const data = JSON.parse(responseText);
    
    if (!data.ok) {
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ Telegram API',
        details: data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'
      };
    }
    
    const webhookInfo = data.result;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ webhook
    if (!webhookInfo.url || webhookInfo.url === '') {
      return {
        success: false,
        error: 'Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        message: 'URL webhook –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        details: {
          currentUrl: currentWebAppUrl,
          webhookUrl: '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù',
          status: 'NOT_SET',
          pendingUpdateCount: webhookInfo.pending_update_count || 0
        }
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ URL
    const isCorrectUrl = webhookInfo.url === currentWebAppUrl;
    
    if (!isCorrectUrl) {
    return {
        success: false,
        error: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π URL',
        message: 'Webhook —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL',
        details: {
          currentUrl: currentWebAppUrl,
          webhookUrl: webhookInfo.url,
          status: 'WRONG_URL',
          pendingUpdateCount: webhookInfo.pending_update_count || 0,
          lastErrorDate: webhookInfo.last_error_date,
          lastErrorMessage: webhookInfo.last_error_message
        }
      };
    }
    
    // –í—Å–µ —Ö–æ—Ä–æ—à–æ
    return {
      success: true,
      message: 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ',
      url: webhookInfo.url,
      details: {
        currentUrl: currentWebAppUrl,
        webhookUrl: webhookInfo.url,
        status: 'OK',
        pendingUpdateCount: webhookInfo.pending_update_count || 0,
        maxConnections: webhookInfo.max_connections || 40,
        allowedUpdates: webhookInfo.allowed_updates || [],
        lastErrorDate: webhookInfo.last_error_date,
        lastErrorMessage: webhookInfo.last_error_message
      }
    };

  } catch (error) {
    Logger.log(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ webhook: ${error.message}`);
    return {
      success: false,
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      details: error.message
    };
  }
}


/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–º–æ—â—å—é AI.
 * @param {object} basicInfo - –û–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ–±—Ö—É–∫–µ.
 * @returns {object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI.
 */
function getAiAnalysis(basicInfo) {
  try {
    const analysis = analyzeWebhookStatus(basicInfo.rawInfo, basicInfo.webAppUrl);
    if (analysis.error) {
      throw new Error(`AI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${analysis.error}. –î–µ—Ç–∞–ª–∏: ${analysis.details}`);
    }
    return { ok: true, analysis: analysis, basicInfo: basicInfo };
  } catch (aiError) {
    const errorMessage = `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI: ${aiError.message}`;
    Logger.log(`‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ${errorMessage}\nStack: ${aiError.stack || 'N/A'}`);
    return {
      ok: false,
      analysis: {
        status: "WARNING",
        summary: "AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        details: `–î–∞–Ω–Ω—ã–µ –æ—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –∞–Ω–∞–ª–∏–∑ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –û—à–∏–±–∫–∞: ${aiError.message}`,
        solution: "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ Gemini API –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ Google Cloud Console.\n2. –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
        rawTelegramData: JSON.stringify(basicInfo.rawInfo, null, 2)
      },
      basicInfo: basicInfo
    };
  }
}


// setWebhookFromDialog –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ ui_dialogs.js

// deleteWebhookFromDialog –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ ui_dialogs.js

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 */
function setupAdminSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const scriptProps = PropertiesService.getScriptProperties();
    
  try {
    let usersSsId = scriptProps.getProperty('USERS_SPREADSHEET_ID');
    let usersSs;

    // 1. –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (usersSsId) {
      try {
        usersSs = SpreadsheetApp.openById(usersSsId);
      } catch (e) {
        usersSsId = null; // –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      }
    }

    if (!usersSsId) {
      usersSs = SpreadsheetApp.create('SmartPit_Users');
      usersSsId = usersSs.getId();
      scriptProps.setProperty('USERS_SPREADSHEET_ID', usersSsId);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSheet = usersSs.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏') || usersSs.insertSheet('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 0);
    const headers = ['id', 'is_bot', 'first_name', 'last_name', 'username', 'language_code', 'is_premium', 'RegistrationDate', 'UserFolderLink', 'UserSheetLink', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'];
    let currentHeaders = [];
    if (usersSheet.getLastColumn() > 0) {
        currentHeaders = usersSheet.getRange(1, 1, 1, usersSheet.getLastColumn()).getValues()[0];
    }
    if (JSON.stringify(headers) !== JSON.stringify(currentHeaders)) {
        usersSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
        usersSheet.setFrozenRows(1);
    }

    // 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    let categoriesSheet = usersSs.getSheetByName('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏');
    if (!categoriesSheet) {
      categoriesSheet = usersSs.insertSheet('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 1);
      categoriesSheet.getRange('A1:A3').setValues([['–°—Ç–∞–Ω–¥–∞—Ä—Ç'], ['–ü—Ä–µ–º–∏—É–º'], ['–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫']]);
    }
    const categoryRange = categoriesSheet.getRange(`A1:A${categoriesSheet.getLastRow()}`);
    const rule = SpreadsheetApp.newDataValidation().requireValueInRange(categoryRange).build();
    usersSheet.getRange('K2:K').setDataValidation(rule);
    usersSheet.getRange('L2:L').insertCheckboxes();

    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    let settingsSheet = ss.getSheetByName('–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
    if (!settingsSheet) {
      settingsSheet = ss.insertSheet('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 0);
    }
    settingsSheet.clear();
    const folder = DriveApp.getFileById(ss.getId()).getParents().next();
    settingsSheet.getRange('A1:B2').setValues([
      ['ID —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', `=HYPERLINK("${usersSs.getUrl()}"; "${usersSsId}")`],
      ['ID –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞', `=HYPERLINK("${folder.getUrl()}"; "${folder.getId()}")`]
    ]);
    settingsSheet.getRange('A3').setValue('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (AI - ‚úì)');
    settingsSheet.getRange('B3').insertCheckboxes().check(); // AI mode by default

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—Å—Ç–∞ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º–ø–æ—Ä—Ç)"
    let importSheet = ss.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º–ø–æ—Ä—Ç)');
    if (!importSheet) {
      importSheet = ss.insertSheet('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º–ø–æ—Ä—Ç)', 1);
    }
    importSheet.clear();
    importSheet.getRange('A1').setFormula(`=IMPORTRANGE("${usersSsId}"; "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!A:L")`);

    // 6. –ê–∫–∫—É—Ä–∞—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ª–∏—Å—Ç–æ–≤
    const requiredSheets = ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º–ø–æ—Ä—Ç)'];
    ss.getSheets().forEach(sheet => {
      if (requiredSheets.indexOf(sheet.getName()) === -1) {
        ss.deleteSheet(sheet);
      }
    });

    // 7. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—â–∏—Ç—ã
    setProtection(true);

    ui.alert('–¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ó–∞—â–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');

  } catch (e) {
    Logger.log(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${e.message}\nStack: ${e.stack || 'N/A'}`);
    ui.alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${e.message}`);
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç –∑–∞—â–∏—Ç—É —Å –∫–ª—é—á–µ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤.
 * @param {boolean} [protect] - –ï—Å–ª–∏ true, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç—É. –ï—Å–ª–∏ false, —Å–Ω–∏–º–∞–µ—Ç. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç.
 */
function toggleSheetProtection(protect) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ui = SpreadsheetApp.getUi();
  const protections = ss.getProtections(SpreadsheetApp.ProtectionType.SHEET);
  const isProtected = protections.length > 0;

  if (protect === undefined) {
    protect = !isProtected;
  }

  if (protect) {
    setProtection(true);
    ui.alert('–ó–∞—â–∏—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
  } else {
    protections.forEach(p => p.remove());
    const rangeProtections = ss.getProtections(SpreadsheetApp.ProtectionType.RANGE);
    rangeProtections.forEach(p => p.remove());
    ui.alert('–ó–∞—â–∏—Ç–∞ —Å–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —è—á–µ–π–∫–∏.');
  }
}

/**
 * –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—Ç—ã.
 */
function setProtection() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const settingsSheet = ss.getSheetByName('–ù–∞—Å—Ç—Ä–æ–π–∫–∏');
  if (settingsSheet) {
    const protection = settingsSheet.protect().setDescription('–ó–∞—â–∏—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    protection.setUnprotectedRanges([settingsSheet.getRange('B3')]);
    protection.removeEditors(protection.getEditors());
    protection.addEditor(Session.getEffectiveUser());
  }

  const importSheet = ss.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ò–º–ø–æ—Ä—Ç)');
  if (importSheet) {
    const protection = importSheet.getRange('A1').protect().setDescription('–ó–∞—â–∏—Ç–∞ —Ñ–æ—Ä–º—É–ª—ã –∏–º–ø–æ—Ä—Ç–∞');
    protection.removeEditors(protection.getEditors());
    protection.addEditor(Session.getEffectiveUser());
  }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω Telegram.
 */
function setTelegramToken() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram',
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Telegram API:',
    ui.ButtonSet.OK_CANCEL
  );

  if (response.getSelectedButton() == ui.Button.OK) {
    const token = response.getResponseText().trim();
    if (token) {
      PropertiesService.getScriptProperties().setProperty('TELEGRAM_TOKEN', token);
      ui.alert('–¢–æ–∫–µ–Ω Telegram —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
    } else {
      ui.alert('–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    }
  }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á Gemini API.
 */
function setGeminiApiKey() {
  const ui = SpreadsheetApp.getUi();
  const response = ui.prompt(
    '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API',
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á Google Gemini API:',
    ui.ButtonSet.OK_CANCEL
  );

  if (response.getSelectedButton() == ui.Button.OK) {
    const apiKey = response.getResponseText().trim();
    if (apiKey) {
      PropertiesService.getScriptProperties().setProperty('GEMINI_API_KEY', apiKey);
      ui.alert('–ö–ª—é—á Gemini API —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.');
    } else {
      ui.alert('–ö–ª—é—á API –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
    }
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç.
 */
function clearCurrentSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getActiveSheet();
  const ui = SpreadsheetApp.getUi();

  const response = ui.alert(
    '–û—á–∏—Å—Ç–∫–∞ –ª–∏—Å—Ç–∞',
    `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –ª–∏—Å—Ç "${sheet.getName()}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.`,
    ui.ButtonSet.YES_NO
  );

  if (response == ui.Button.YES) {
    sheet.clear();
    ui.alert('–õ–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.');
  } else {
    ui.alert('–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup –¥–ª—è Telegram —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
 * @param {number} chatId - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –±–∞–∑–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏).
 * @returns {object} –û–±—ä–µ–∫—Ç ReplyKeyboardMarkup.
 */
function getMenu(chatId) {
  return {
    keyboard: [
      [{ text: 'üçΩ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é' }, { text: 'üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }, { text: 'üîÑ –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞' }],
      [{ text: 'üóÇ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞' }, { text: 'üìÑ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
 * @param {string|number} chatId - ID —á–∞—Ç–∞.
 */
function sendMenu(chatId) {
  const text = '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
  sendText(chatId, text, getMenu(chatId));
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
function getMainMenu(chatId) {
  const userData = getUserData(chatId);
  const isAdmin = userData && userData.isAdmin;
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üçΩÔ∏è –ú–µ–Ω—é –ø–∏—Ç–∞–Ω–∏—è', callback_data: 'menu_nutrition' },
        { text: 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫', callback_data: 'shopping_list' }
      ],
      [
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'statistics' }
      ],
      [
        { text: 'üîÑ –ó–∞–º–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤', callback_data: 'product_replacements' },
        { text: 'üìù –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è', callback_data: 'food_diary' }
      ]
    ]
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  if (isAdmin) {
    keyboard.inline_keyboard.push([
      { text: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_diagnostics' },
      { text: 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º', callback_data: 'admin_project_manager' }
    ]);
    keyboard.inline_keyboard.push([
      { text: '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' },
      { text: 'üõ†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏—Å—Ç—ã', callback_data: 'admin_restore_sheets' }
    ]);
  }

  return {
    text: `ü§ñ *SmartPitanieBot* - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–∏—Ç–∞–Ω–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    reply_markup: keyboard
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback'–æ–≤
 */
function handleAdminCallback(callbackQuery) {
  const chatId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  switch (data) {
    case 'admin_diagnostics':
      handleAdminDiagnostics(chatId);
      break;
    case 'admin_project_manager':
      handleAdminProjectManager(chatId);
      break;
    case 'admin_panel':
      handleAdminPanel(chatId);
      break;
    case 'admin_restore_sheets':
      handleAdminRestoreSheets(chatId);
      break;
    default:
      sendText(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  answerCallbackQuery(callbackQuery.id);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 */
function handleAdminDiagnostics(chatId) {
  sendText(chatId, 'üîß –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
  try {
    const full = Core.Diagnostics && Core.Diagnostics.runFull ? Core.Diagnostics.runFull() : { ok: false };
    const reportText = Core.Diagnostics && Core.Diagnostics.formatReportForTelegram ? Core.Diagnostics.formatReportForTelegram(full) : '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
    sendText(chatId, reportText);
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ' + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
 */
function handleAdminProjectManager(chatId) {
  try {
    const projectData = getProjectData();
    const stats = getProjectStats();
    
    let message = 'üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º SmartPitanieBot*\n\n';
    message += `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.totalTasks}\n`;
    message += `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedTasks}\n`;
    message += `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgressTasks}\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö: ${stats.newTasks}\n`;
    message += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${stats.overdueTasks}\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${stats.completionRate}%\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stats.averageProgress}%\n\n`;
    
    if (projectData.tasks && projectData.tasks.length > 0) {
      message += '*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏:*\n';
      const recentTasks = projectData.tasks.slice(0, 5);
      recentTasks.forEach(task => {
        const status = task.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' ? '‚úÖ' : 
                      task.status === '–í —Ä–∞–±–æ—Ç–µ' ? 'üîÑ' : 'üìù';
        message += `${status} ${task.name} (${task.status})\n`;
      });
    } else {
      message += 'üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'admin_add_task' },
          { text: 'üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_full_stats' }
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_refresh_data' },
          { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'admin_all_tasks' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };
    
    sendText(chatId, message, keyboard);
    
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
 */
function handleAdminPanel(chatId) {
  const webAppUrl = ScriptApp.getService().getUrl();
  const adminPanelUrl = webAppUrl + '?page=admin';
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîß –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', web_app: { url: adminPanelUrl } }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
      ]
    ]
  };
  
  sendText(chatId, 
    '‚öôÔ∏è *–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å SmartPitanieBot*\n\n' +
    '–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω—É—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.',
    keyboard
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–≤
 */
function handleAdminRestoreSheets(chatId) {
  sendText(chatId, 'üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');
  try {
    const res = Core.Diagnostics && Core.Diagnostics.autoRepair ? Core.Diagnostics.autoRepair({}) : { success: false, actions: [], errors: ['–ú–æ–¥—É–ª—å Diagnostics –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'] };
    let msg = res.success ? '‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ' : '‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏';
    if (res.actions && res.actions.length) {
      msg += '\n–î–µ–π—Å—Ç–≤–∏—è:\n- ' + res.actions.join('\n- ');
    }
    if (res.errors && res.errors.length) {
      msg += '\n–û—à–∏–±–∫–∏:\n- ' + res.errors.join('\n- ');
    }
    sendText(chatId, msg);
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: ' + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
 */
function handleAdminAddTask(chatId) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
  sendText(chatId, 
    '‚ûï *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n' +
    '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    '`/add_task –ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç|–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å|–î–µ–¥–ª–∞–π–Ω`\n\n' +
    '–ü—Ä–∏–º–µ—Ä:\n' +
    '`/add_task –ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥|–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –º–µ–Ω—é|–í—ã—Å–æ–∫–∏–π|–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫|2024-01-15`'
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function handleAdminFullStats(chatId) {
  try {
    const stats = getProjectStats();
    const projectData = getProjectData();
    
    let message = 'üìä *–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n\n';
    message += `üìà *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.totalTasks}\n`;
    message += `‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completedTasks}\n`;
    message += `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgressTasks}\n`;
    message += `‚Ä¢ –ù–æ–≤—ã—Ö: ${stats.newTasks}\n`;
    message += `‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: ${stats.overdueTasks}\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${stats.completionRate}%\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${stats.averageProgress}%\n\n`;
    
    if (projectData.projects && projectData.projects.length > 0) {
      message += `üìã *–ü—Ä–æ–µ–∫—Ç—ã (${projectData.projects.length}):*\n`;
      projectData.projects.forEach(project => {
        const status = project.status === '–ê–∫—Ç–∏–≤–Ω—ã–π' ? 'üü¢' : 'üî¥';
        message += `${status} ${project.name}\n`;
      });
      message += '\n';
    }
    
    if (projectData.team && projectData.team.length > 0) {
      message += `üë• *–ö–æ–º–∞–Ω–¥–∞ (${projectData.team.length}):*\n`;
      projectData.team.forEach(member => {
        message += `‚Ä¢ ${member.name} - ${member.role}\n`;
      });
    }
    
    sendText(chatId, message);
    
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
function handleAdminRefreshData(chatId) {
  sendText(chatId, 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞...');
  
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    sendText(chatId, '‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    handleAdminProjectManager(chatId);
    
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ' + error.message);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
function handleAdminAllTasks(chatId) {
  try {
    const projectData = getProjectData();
    
    if (!projectData.tasks || projectData.tasks.length === 0) {
      sendText(chatId, 'üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á');
      return;
    }
    
    let message = `üìã *–í—Å–µ –∑–∞–¥–∞—á–∏ (${projectData.tasks.length}):*\n\n`;
    
    projectData.tasks.forEach((task, index) => {
      const status = task.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' ? '‚úÖ' : 
                    task.status === '–í —Ä–∞–±–æ—Ç–µ' ? 'üîÑ' : 'üìù';
      const priority = task.priority === '–í—ã—Å–æ–∫–∏–π' ? 'üî¥' : 
                      task.priority === '–°—Ä–µ–¥–Ω–∏–π' ? 'üü°' : 'üü¢';
      
      message += `${index + 1}. ${status} ${priority} ${task.name}\n`;
      message += `   –°—Ç–∞—Ç—É—Å: ${task.status} | –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress}%\n`;
      if (task.assignee) message += `   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${task.assignee}\n`;
      if (task.deadline) message += `   –î–µ–¥–ª–∞–π–Ω: ${task.deadline}\n`;
      message += '\n';
    });
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if (message.length > 4000) {
      const parts = message.match(/.{1,4000}/g);
      parts.forEach(part => {
        sendText(chatId, part);
      });
    } else {
      sendText(chatId, message);
    }
    
  } catch (error) {
    sendText(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: ' + error.message);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function sendSettingsMenu(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéØ –¶–µ–ª—å', callback_data: 'settings_goal' },
        { text: 'üë§ –ü–æ–ª', callback_data: 'settings_sex' }
      ],
      [
        { text: 'üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'settings_activity' },
        { text: 'üìè –†–æ—Å—Ç/–í–µ—Å', callback_data: 'settings_measurements' }
      ],
      [
        { text: 'üçΩÔ∏è –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', callback_data: 'settings_preferences' },
        { text: '‚öôÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'settings_notifications' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
      ]
    ]
  };
  
  sendText(chatId, 
    '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ SmartPitanieBot*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:',
    keyboard
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ —Ü–µ–ª–µ–π
 */
function sendGoalOptions(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üí™ –ù–∞–±—Ä–∞—Ç—å –º—ã—à–µ—á–Ω—É—é –º–∞—Å—Å—É', callback_data: 'goal_gain_muscle' },
        { text: 'üî• –°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å', callback_data: 'goal_lose_weight' }
      ],
      [
        { text: '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–µ—Å', callback_data: 'goal_maintain' },
        { text: 'üèÉ –£–ª—É—á—à–∏—Ç—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', callback_data: 'goal_endurance' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_menu' }
      ]
    ]
  };
  
  sendText(chatId, 
    'üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:*\n\n' +
    '–ö–∞–∫—É—é —Ü–µ–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ—Å—Ç–∏—á—å?',
    keyboard
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –ø–æ–ª–∞
 */
function sendSexOptions(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'sex_male' },
        { text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'sex_female' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_menu' }
      ]
    ]
  };
  
  sendText(chatId, 
    'üë§ *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:*\n\n' +
    '–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ BMR.',
    keyboard
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */
function sendActivityOptions(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üõãÔ∏è –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', callback_data: 'activity_sedentary' },
        { text: 'üö∂ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'activity_light' }
      ],
      [
        { text: 'üèÉ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'activity_moderate' },
        { text: 'üí™ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'activity_high' }
      ],
      [
        { text: 'üèãÔ∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'activity_very_high' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', callback_data: 'settings_menu' }
      ]
    ]
  };
  
  sendText(chatId, 
    'üèÉ *–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:',
    keyboard
  );
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ BMR (Basal Metabolic Rate)
 */
function calculateBMR(weight, height, age, sex) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (!weight || !height || !age || !sex) {
      throw new Error('–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ BMR');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
    weight = parseFloat(weight);
    height = parseFloat(height);
    age = parseInt(age);
    
    if (isNaN(weight) || isNaN(height) || isNaN(age)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }
    
    // –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    let bmr;
    if (sex === 'male' || sex === 'm') {
      bmr = 10 * weight + 6.25 * height - 5 * age + 5;
    } else if (sex === 'female' || sex === 'f') {
      bmr = 10 * weight + 6.25 * height - 5 * age - 161;
    } else {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "male"/"m" –∏–ª–∏ "female"/"f"');
    }
    
    Logger.log(`BMR —Ä–∞—Å—á–µ—Ç: –≤–µ—Å=${weight}, —Ä–æ—Å—Ç=${height}, –≤–æ–∑—Ä–∞—Å—Ç=${age}, –ø–æ–ª=${sex}, BMR=${bmr}`);
    return Math.round(bmr);
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ BMR: ' + error.message);
    throw error;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ TDEE (Total Daily Energy Expenditure)
 */
function calculateTDEE(bmr, activityLevel) {
  const activityMultipliers = {
    'sedentary': 1.2,      // –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
    'light': 1.375,         // –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    'moderate': 1.55,       // –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    'high': 1.725,          // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    'very_high': 1.9        // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  };
  
  return bmr * activityMultipliers[activityLevel];
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é AI
 */
function generateAiMenu(userId, preferences) {
  try {
    const prompt = `–°–æ–∑–¥–∞–π –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏: ${JSON.stringify(preferences)}. 
    –ú–µ–Ω—é –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.`;
    
    const response = callGemini(prompt);
    return response;
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –º–µ–Ω—é: ' + error.message);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ —Å –ø–æ–º–æ—â—å—é AI
 */
function generateShoppingListAi(menu) {
  try {
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –º–µ–Ω—é —Å–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: ${menu}. 
    –°–≥—Ä—É–ø–ø–∏—Ä—É–π –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–æ–≤–æ—â–∏, –º—è—Å–æ, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ç.–¥.).`;
    
    const response = callGemini(prompt);
    return response;
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫: ' + error.message);
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getUserCount() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const usersSheetId = scriptProps.getProperty('USERS_SPREADSHEET_ID');
    
    if (!usersSheetId) {
      return 0;
    }
    
    const usersSheet = SpreadsheetApp.openById(usersSheetId);
    const sheet = usersSheet.getSheetByName('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏');
    
    if (!sheet) {
      return 0;
    }
    
    const lastRow = sheet.getLastRow();
    return Math.max(0, lastRow - 1); // –í—ã—á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message);
    return 0;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
function getMessageCount() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const templateSheetId = scriptProps.getProperty('TEMPLATE_SHEET_ID');
    
    if (!templateSheetId) {
      return 0;
    }
    
    const templateSheet = SpreadsheetApp.openById(templateSheetId);
    const logSheet = templateSheet.getSheetByName('–õ–æ–≥–∏');
    
    if (!logSheet) {
      return 0;
    }
    
    const lastRow = logSheet.getLastRow();
    return Math.max(0, lastRow - 1); // –í—ã—á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: ' + error.message);
    return 0;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –∑–∞–ø—Ä–æ—Å–æ–≤
 */
function getAiRequestCount() {
  try {
    const scriptProps = PropertiesService.getScriptProperties();
    const templateSheetId = scriptProps.getProperty('TEMPLATE_SHEET_ID');
    
    if (!templateSheetId) {
      return 0;
    }
    
    const templateSheet = SpreadsheetApp.openById(templateSheetId);
    const logSheet = templateSheet.getSheetByName('–õ–æ–≥–∏');
    
    if (!logSheet) {
      return 0;
    }
    
    const data = logSheet.getDataRange().getValues();
    let aiCount = 0;
    
    for (let i = 1; i < data.length; i++) {
      const message = data[i][1] || ''; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ç–æ—Ä–æ–π –∫–æ–ª–æ–Ω–∫–µ
      if (message.includes('AI') || message.includes('Gemini') || message.includes('generate')) {
        aiCount++;
      }
    }
    
    return aiCount;
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤: ' + error.message);
    return 0;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å AI
 */
function getAiAccuracy() {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
    const aiRequests = getAiRequestCount();
    const totalMessages = getMessageCount();
    
    if (totalMessages === 0) {
      return 0;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞: 85% –±–∞–∑–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ + –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    const baseAccuracy = 85;
    const bonus = Math.min(aiRequests * 0.5, 10); // –ú–∞–∫—Å–∏–º—É–º 10% –±–æ–Ω—É—Å–∞
    
    return Math.min(100, Math.round(baseAccuracy + bonus));
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ AI: ' + error.message);
    return 0;
  }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è webhook
 */
function showWebhookDialog() {
  try {
    const webAppUrl = ScriptApp.getService().getUrl();
    const html = HtmlService.createHtmlOutputFromFile('webhook_manager_dialog')
      .setWidth(800)
      .setHeight(600);
    SpreadsheetApp.getUi().showModalDialog(html, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhook');
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è webhook –¥–∏–∞–ª–æ–≥–∞: ' + error.message);
    SpreadsheetApp.getUi().alert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è webhook –¥–∏–∞–ª–æ–≥–∞: ' + error.message);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
 */
function initializeProjectManager() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
    let projectsSheet = ss.getSheetByName('–ü—Ä–æ–µ–∫—Ç—ã');
    if (!projectsSheet) {
      projectsSheet = ss.insertSheet('–ü—Ä–æ–µ–∫—Ç—ã');
      projectsSheet.getRange('A1:F1').setValues([['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è']]);
      projectsSheet.setFrozenRows(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∑–∞–¥–∞—á
    let tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    if (!tasksSheet) {
      tasksSheet = ss.insertSheet('–ó–∞–¥–∞—á–∏');
      tasksSheet.getRange('A1:H1').setValues([['ID', 'ID –ø—Ä–æ–µ–∫—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–î–µ–¥–ª–∞–π–Ω']]);
      tasksSheet.setFrozenRows(1);
    }
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    let teamSheet = ss.getSheetByName('–ö–æ–º–∞–Ω–¥–∞');
    if (!teamSheet) {
      teamSheet = ss.insertSheet('–ö–æ–º–∞–Ω–¥–∞');
      teamSheet.getRange('A1:D1').setValues([['ID', '–ò–º—è', '–†–æ–ª—å', 'Email']]);
      teamSheet.setFrozenRows(1);
    }
    
    Logger.log('–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    return { success: true, message: '–°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞' };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
 */
function getProjectData() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const projectsSheet = ss.getSheetByName('–ü—Ä–æ–µ–∫—Ç—ã');
    const tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    const teamSheet = ss.getSheetByName('–ö–æ–º–∞–Ω–¥–∞');
    
    if (!projectsSheet || !tasksSheet || !teamSheet) {
      initializeProjectManager();
    }
    
    const projects = projectsSheet ? projectsSheet.getDataRange().getValues() : [];
    const tasks = tasksSheet ? tasksSheet.getDataRange().getValues() : [];
    const team = teamSheet ? teamSheet.getDataRange().getValues() : [];
    
    return {
      projects: projects.slice(1).map(row => ({
        id: row[0],
        name: row[1],
        description: row[2],
        status: row[3],
        created: row[4],
        updated: row[5]
      })),
      tasks: tasks.slice(1).map(row => ({
        id: row[0],
        projectId: row[1],
        name: row[2],
        description: row[3],
        status: row[4],
        priority: row[5],
        assignee: row[6],
        deadline: row[7]
      })),
      team: team.slice(1).map(row => ({
        id: row[0],
        name: row[1],
        role: row[2],
        email: row[3]
      }))
    };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    return { projects: [], tasks: [], team: [] };
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
 */
function addProject(name, description) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let projectsSheet = ss.getSheetByName('–ü—Ä–æ–µ–∫—Ç—ã');
    
    if (!projectsSheet) {
      const result = initializeProjectManager();
      if (!result.success) {
        throw new Error(result.error);
      }
      projectsSheet = ss.getSheetByName('–ü—Ä–æ–µ–∫—Ç—ã');
    }
    
    const projectId = 'PROJ_' + Date.now();
    const now = new Date();
    
    projectsSheet.appendRow([projectId, name, description, '–ê–∫—Ç–∏–≤–Ω—ã–π', now, now]);
    
    Logger.log(`–ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: ${name} (${projectId})`);
    return { success: true, projectId: projectId };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
 */
function addTask(projectId, name, description, priority, assignee, deadline) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    
    if (!tasksSheet) {
      const result = initializeProjectManager();
      if (!result.success) {
        throw new Error(result.error);
      }
      tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    }
    
    const taskId = 'TASK_' + Date.now();
    
    tasksSheet.appendRow([taskId, projectId, name, description, '–ù–æ–≤–∞—è', priority, assignee, deadline]);
    
    Logger.log(`–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${name} (${taskId})`);
    return { success: true, taskId: taskId };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
 */
function getProjectStats() {
  try {
    const data = getProjectData();
    const tasks = data.tasks;
    
    const totalTasks = tasks.length;
    const completedTasks = tasks.filter(t => t.status === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞').length;
    const inProgressTasks = tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length;
    const newTasks = tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length;
    const overdueTasks = tasks.filter(t => {
      if (!t.deadline) return false;
      const deadline = new Date(t.deadline);
      return deadline < new Date() && t.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞';
    }).length;
    
    const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
    const averageProgress = totalTasks > 0 ? Math.round((completedTasks + (inProgressTasks * 0.5)) / totalTasks * 100) : 0;
    
    return {
      totalTasks,
      completedTasks,
      inProgressTasks,
      newTasks,
      overdueTasks,
      completionRate,
      averageProgress
    };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    return {
      totalTasks: 0,
      completedTasks: 0,
      inProgressTasks: 0,
      newTasks: 0,
      overdueTasks: 0,
      completionRate: 0,
      averageProgress: 0
    };
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
 */
function addTeamMember(name, role, email) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let teamSheet = ss.getSheetByName('–ö–æ–º–∞–Ω–¥–∞');
    
    if (!teamSheet) {
      const result = initializeProjectManager();
      if (!result.success) {
        throw new Error(result.error);
      }
      teamSheet = ss.getSheetByName('–ö–æ–º–∞–Ω–¥–∞');
    }
    
    const memberId = 'MEMBER_' + Date.now();
    teamSheet.appendRow([memberId, name, role, email]);
    
    Logger.log(`–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω: ${name} (${memberId})`);
    return { success: true, memberId: memberId };
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
 */
function updateTaskStatus(taskId, newStatus) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    
    if (!tasksSheet) {
      throw new Error('–õ–∏—Å—Ç –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = tasksSheet.getDataRange().getValues();
    const headers = data[0];
    const statusIndex = headers.indexOf('–°—Ç–∞—Ç—É—Å');
    const idIndex = headers.indexOf('ID');
    
    if (statusIndex === -1 || idIndex === -1) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏');
    }
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][idIndex] === taskId) {
        tasksSheet.getRange(i + 1, statusIndex + 1).setValue(newStatus);
        Logger.log(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${newStatus}`);
        return { success: true };
      }
    }
    
    throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç
 */
function deleteProject(projectId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const projectsSheet = ss.getSheetByName('–ü—Ä–æ–µ–∫—Ç—ã');
    
    if (!projectsSheet) {
      throw new Error('–õ–∏—Å—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = projectsSheet.getDataRange().getValues();
    const headers = data[0];
    const idIndex = headers.indexOf('ID');
    
    if (idIndex === -1) {
      throw new Error('–ö–æ–ª–æ–Ω–∫–∞ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][idIndex] === projectId) {
        projectsSheet.deleteRow(i + 1);
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        deleteTasksByProject(projectId);
        
        Logger.log(`–ü—Ä–æ–µ–∫—Ç ${projectId} —É–¥–∞–ª–µ–Ω`);
        return { success: true };
      }
    }
    
    throw new Error('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
function deleteTasksByProject(projectId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    
    if (!tasksSheet) return;
    
    const data = tasksSheet.getDataRange().getValues();
    const headers = data[0];
    const projectIdIndex = headers.indexOf('ID –ø—Ä–æ–µ–∫—Ç–∞');
    
    if (projectIdIndex === -1) return;
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    for (let i = data.length - 1; i >= 1; i--) {
      if (data[i][projectIdIndex] === projectId) {
        tasksSheet.deleteRow(i + 1);
      }
    }
    
    Logger.log(`–ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId} —É–¥–∞–ª–µ–Ω—ã`);
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É
 */
function deleteTask(taskId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const tasksSheet = ss.getSheetByName('–ó–∞–¥–∞—á–∏');
    
    if (!tasksSheet) {
      throw new Error('–õ–∏—Å—Ç –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = tasksSheet.getDataRange().getValues();
    const headers = data[0];
    const idIndex = headers.indexOf('ID');
    
    if (idIndex === -1) {
      throw new Error('–ö–æ–ª–æ–Ω–∫–∞ ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][idIndex] === taskId) {
        tasksSheet.deleteRow(i + 1);
        Logger.log(`–ó–∞–¥–∞—á–∞ ${taskId} —É–¥–∞–ª–µ–Ω–∞`);
        return { success: true };
      }
    }
    
    throw new Error('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    
  } catch (error) {
    Logger.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: ' + error.message);
    return { success: false, error: error.message };
  }
}
